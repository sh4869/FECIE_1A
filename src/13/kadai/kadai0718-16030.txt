
# kadai13-1


## ソースコード


```c

#include <stdio.h>
#include "PLIB.h"
#define N 7
static int data[N] = {57,22,80,14,34,70,87};
int rotation1(BSTnode **,int ,int);
int rotation2x(BSTnode *,BSTnode *,int,int);
BSTnode *head;

int main(void){
  int data2,rot,rc;
  printf("/*** 4.3章 1.バランスを保つための変形操作 **\n");
  binary_tree(&head,data,N);
  while(1){
    printf("ノード番号と回転向きを入力(例: 57 1 (1:右、2:左,0:終了)):");
    scanf("%d",&data2);
    if(data2<1){
      printf("*/\n");
      return 1;
    }
    scanf("%d",&rot);
    if((rot < 1) || (rot > 3)){
      printf("*/\n");
      return 1;
    }
    rc = rotation1(&head,data2,rot);
    if(rc == 0){
      if(rot == 1){
        printf("** %dを中心に、右1重回転しました **\n",data2);
      } else {
        printf("** %dを中心に、左1重回転しました **\n",data2);
      }
      printtree(head);
    } else {
      printf("Judgement(rc = %d) ",rc);
      switch(rc){
        case 2:
          printf("Empty tree\n");
          break;
        case 3:
          printf("右回転不可\n");
          break;
        case 4:
          printf("左回転不可\n");
          break;
        case 5:
          printf("正常 (処理系未作成)\n");
          break;
      }
    }
  }
}

int rotation1(BSTnode **head,int x,int rot){
  BSTnode *v,*up;
  int rc;
  up = v = *head;
  if(head == NULL) {
    return 2;
  }
  while(v != NULL){
    if(x == v->key){
      rc = rotation2x(up,v,x,rot);
      return rc;
    }
    up = v;
    if(x < v->key){
      v = v->lson;
    } else {
      v = v->rson;
    }
  }
  return 1;
}

int rotation2x(BSTnode *up,BSTnode *v,int x,int rot){
  if((rot == 1) && (v->lson == NULL)) return 3;
  if((rot == 2) && (v->rson == NULL)) return 4;
  printf("up=%p,v=%p,x=%d,rot=%d\n",up,v,x,rot);
  return 5;
}


```

## 出力


```

/*** 4.3章 1.バランスを保つための変形操作 **
(** Binary Tree using data[7] **)
57(0000000000CE2430) (22(0000000000CE2450) , 80(0000000000CE2470)) 
22(0000000000CE2450) (14(0000000000CE2490) , 34(0000000000CE24B0)) 
14(0000000000CE2490) (0(0000000000000000) , 0(0000000000000000))
34(0000000000CE24B0) (0(0000000000000000) , 0(0000000000000000))
80(0000000000CE2470) (70(0000000000CE24D0) , 87(0000000000CE24F0)) 
70(0000000000CE24D0) (0(0000000000000000) , 0(0000000000000000))
87(0000000000CE24F0) (0(0000000000000000) , 0(0000000000000000))
ノード番号と回転向きを入力(例: 57 1 (1:右、2:左,0:終了)): 57 1
up=0000000000CE2430,v=0000000000CE2430,x=57,rot=1
Judgement(rc = 5) 正常 (処理系未作成)
ノード番号と回転向きを入力(例: 57 1 (1:右、2:左,0:終了)): 22 2
up=0000000000CE2430,v=0000000000CE2450,x=22,rot=2
Judgement(rc = 5) 正常 (処理系未作成)
ノード番号と回転向きを入力(例: 57 1 (1:右、2:左,0:終了)): 14 1
Judgement(rc = 3) 右回転不可
ノード番号と回転向きを入力(例: 57 1 (1:右、2:左,0:終了)): 14 2
Judgement(rc = 4) 左回転不可
ノード番号と回転向きを入力(例: 57 1 (1:右、2:左,0:終了)): 87 1
Judgement(rc = 3) 右回転不可
ノード番号と回転向きを入力(例: 57 1 (1:右、2:左,0:終了)): 0
*/



```


# kadai13-2


## ソースコード


```c

#include <stdio.h>
#include "PLIB.h"
#define N 15
static int data[N] = {57,22,80,14,34,70,87,4,17,75,65,30,84,40,90};
int rotation1(BSTnode **,int ,int);
int rotation2(BSTnode *,BSTnode *,int,int);
BSTnode *head;

int main(void){
  int data2,rot,rc;
  printf("/*** 4.3章 1.バランスを保つための変形操作 **\n");
  binary_tree(&head,data,N);
  while(1){
    printf("ノード番号と回転向きを入力(例: 57 1 (1:右、2:左,0:終了)):");
    scanf("%d",&data2);
    if(data2<1){
      printf("*/\n");
      return 1;
    }
    scanf("%d",&rot);
    if((rot < 1) || (rot > 3)){
      printf("*/\n");
      return 1;
    }
    rc = rotation1(&head,data2,rot);
    if(rc == 0){
      if(rot == 1){
        printf("** %dを中心に、右1重回転しました **\n",data2);
      } else {
        printf("** %dを中心に、左1重回転しました **\n",data2);
      }
      printtree(head);
    } else {
      if(rot == 1){
        printf("右回転不可(左の子なし)\n");
      } else if(rot == 2){
        printf("左回転不可(右の子なし)\n");
      } else {
        printf("プログラムエラー(rc=%d)\n",rc);
      }
    }
  }
}

int rotation1(BSTnode **head,int x,int rot){
  BSTnode *v,*up;
  int rc;
  up = v = *head;
  if(head == NULL) {
    return 2;
  }
  while(v != NULL){
    if(x == v->key){
      rc = rotation2(up,v,x,rot);
      return rc;
    }
    up = v;
    if(x < v->key){
      v = v->lson;
    } else {
      v = v->rson;
    }
  }
  return 1;
}

int rotation2(BSTnode *up,BSTnode *v,int x,int rot){
  if(rot == 1) {
    if(v->lson == NULL) return 3;
    if(up==v){
      head = v->lson;
      v->lson = head->rson;
      head->rson =v;
    } else if(up->lson == v){
      up->lson = v->lson;
      v->lson = up->lson->rson;
      up->lson->rson = v;
    } else {
      up->rson = v->lson;
      v->lson = up->rson->rson;
      up->rson->rson = v;
    }
    return 0;
  }
  if(rot == 2) {
    if(v->rson == NULL) return 4;
    if(up==v){
      head = v->rson;
      v->rson = head->lson;
      head->lson = v;
    } else if(up->lson == v){
      up->lson = v->rson;
      v->lson = up->lson->rson;
      up->lson->lson = v;
    } else {
      up->rson = v->rson;
      v->lson = up->rson->lson;
      up->lson->lson = v;
    }
  }
  printf("up=%p,v=%p,x=%d,rot=%d\n",up,v,x,rot);
  return 5;
}


```

## 出力


```

$ .\kadai13-2.exe
/*** 4.3章 1.バランスを保つための変形操作 **
(** Binary Tree using data[15] **)
57(0000000000C523D0) (22(0000000000C523F0) , 80(0000000000C52410))
22(0000000000C523F0) (14(0000000000C52430) , 34(0000000000C52450))
14(0000000000C52430) ( 4(0000000000C524B0) , 17(0000000000C524D0))
 4(0000000000C524B0) (0(0000000000000000) , 0(0000000000000000))
17(0000000000C524D0) (0(0000000000000000) , 0(0000000000000000))
34(0000000000C52450) (30(0000000000C52530) , 40(0000000000C576D0))
30(0000000000C52530) (0(0000000000000000) , 0(0000000000000000))
40(0000000000C576D0) (0(0000000000000000) , 0(0000000000000000))
80(0000000000C52410) (70(0000000000C52470) , 87(0000000000C52490))
70(0000000000C52470) (65(0000000000C52510) , 75(0000000000C524F0))
65(0000000000C52510) (0(0000000000000000) , 0(0000000000000000))
75(0000000000C524F0) (0(0000000000000000) , 0(0000000000000000))
87(0000000000C52490) (84(0000000000C52550) , 90(0000000000C575F0))
84(0000000000C52550) (0(0000000000000000) , 0(0000000000000000))
90(0000000000C575F0) (0(0000000000000000) , 0(0000000000000000))
ノード番号と回転向きを入力(例: 57 1 (1:右、2:左,0:終了)):57 1
** 57を中心に、右1重回転しました **
22(0000000000C523F0) (14(0000000000C52430) , 57(0000000000C523D0))
14(0000000000C52430) ( 4(0000000000C524B0) , 17(0000000000C524D0))
 4(0000000000C524B0) (0(0000000000000000) , 0(0000000000000000))
17(0000000000C524D0) (0(0000000000000000) , 0(0000000000000000))
57(0000000000C523D0) (34(0000000000C52450) , 80(0000000000C52410))
34(0000000000C52450) (30(0000000000C52530) , 40(0000000000C576D0))
30(0000000000C52530) (0(0000000000000000) , 0(0000000000000000))
40(0000000000C576D0) (0(0000000000000000) , 0(0000000000000000))
80(0000000000C52410) (70(0000000000C52470) , 87(0000000000C52490))
70(0000000000C52470) (65(0000000000C52510) , 75(0000000000C524F0))
65(0000000000C52510) (0(0000000000000000) , 0(0000000000000000))
75(0000000000C524F0) (0(0000000000000000) , 0(0000000000000000))
87(0000000000C52490) (84(0000000000C52550) , 90(0000000000C575F0))
84(0000000000C52550) (0(0000000000000000) , 0(0000000000000000))
90(0000000000C575F0) (0(0000000000000000) , 0(0000000000000000))
ノード番号と回転向きを入力(例: 57 1 (1:右、2:左,0:終了)):0
*/

 C:\Users\sh4869\Documents\Univ\FECIE_1A\src\13\kadai    master± 
$ .\kadai13-2.exe
/*** 4.3章 1.バランスを保つための変形操作 **
(** Binary Tree using data[15] **)
57(00000000007923D0) (22(00000000007923F0) , 80(0000000000792410))
22(00000000007923F0) (14(0000000000792430) , 34(0000000000792450))
14(0000000000792430) ( 4(00000000007924B0) , 17(00000000007924D0))
 4(00000000007924B0) (0(0000000000000000) , 0(0000000000000000))
17(00000000007924D0) (0(0000000000000000) , 0(0000000000000000))
34(0000000000792450) (30(0000000000792530) , 40(00000000007977F0))
30(0000000000792530) (0(0000000000000000) , 0(0000000000000000))
40(00000000007977F0) (0(0000000000000000) , 0(0000000000000000))
80(0000000000792410) (70(0000000000792470) , 87(0000000000792490))
70(0000000000792470) (65(0000000000792510) , 75(00000000007924F0))
65(0000000000792510) (0(0000000000000000) , 0(0000000000000000))
75(00000000007924F0) (0(0000000000000000) , 0(0000000000000000))
87(0000000000792490) (84(0000000000792550) , 90(00000000007978D0))
84(0000000000792550) (0(0000000000000000) , 0(0000000000000000))
90(00000000007978D0) (0(0000000000000000) , 0(0000000000000000))
ノード番号と回転向きを入力(例: 57 1 (1:右、2:左,0:終了)):22 1
** 22を中心に、右1重回転しました **
57(00000000007923D0) (14(0000000000792430) , 80(0000000000792410))
14(0000000000792430) ( 4(00000000007924B0) , 22(00000000007923F0))
 4(00000000007924B0) (0(0000000000000000) , 0(0000000000000000))
22(00000000007923F0) (17(00000000007924D0) , 34(0000000000792450))
17(00000000007924D0) (0(0000000000000000) , 0(0000000000000000))
34(0000000000792450) (30(0000000000792530) , 40(00000000007977F0))
30(0000000000792530) (0(0000000000000000) , 0(0000000000000000))
40(00000000007977F0) (0(0000000000000000) , 0(0000000000000000))
80(0000000000792410) (70(0000000000792470) , 87(0000000000792490))
70(0000000000792470) (65(0000000000792510) , 75(00000000007924F0))
65(0000000000792510) (0(0000000000000000) , 0(0000000000000000))
75(00000000007924F0) (0(0000000000000000) , 0(0000000000000000))
87(0000000000792490) (84(0000000000792550) , 90(00000000007978D0))
84(0000000000792550) (0(0000000000000000) , 0(0000000000000000))
90(00000000007978D0) (0(0000000000000000) , 0(0000000000000000))
ノード番号と回転向きを入力(例: 57 1 (1:右、2:左,0:終了)):0
*/

 C:\Users\sh4869\Documents\Univ\FECIE_1A\src\13\kadai    master± 
$ .\kadai13-2.exe
/*** 4.3章 1.バランスを保つための変形操作 **
(** Binary Tree using data[15] **)
57(0000000000A523D0) (22(0000000000A523F0) , 80(0000000000A52410))
22(0000000000A523F0) (14(0000000000A52430) , 34(0000000000A52450))
14(0000000000A52430) ( 4(0000000000A524B0) , 17(0000000000A524D0))
 4(0000000000A524B0) (0(0000000000000000) , 0(0000000000000000))
17(0000000000A524D0) (0(0000000000000000) , 0(0000000000000000))
34(0000000000A52450) (30(0000000000A52530) , 40(0000000000A575B0))
30(0000000000A52530) (0(0000000000000000) , 0(0000000000000000))
40(0000000000A575B0) (0(0000000000000000) , 0(0000000000000000))
80(0000000000A52410) (70(0000000000A52470) , 87(0000000000A52490))
70(0000000000A52470) (65(0000000000A52510) , 75(0000000000A524F0))
65(0000000000A52510) (0(0000000000000000) , 0(0000000000000000))
75(0000000000A524F0) (0(0000000000000000) , 0(0000000000000000))
87(0000000000A52490) (84(0000000000A52550) , 90(0000000000A575D0))
84(0000000000A52550) (0(0000000000000000) , 0(0000000000000000))
90(0000000000A575D0) (0(0000000000000000) , 0(0000000000000000))
ノード番号と回転向きを入力(例: 57 1 (1:右、2:左,0:終了)):80 1
** 80を中心に、右1重回転しました **
57(0000000000A523D0) (22(0000000000A523F0) , 70(0000000000A52470))
22(0000000000A523F0) (14(0000000000A52430) , 34(0000000000A52450))
14(0000000000A52430) ( 4(0000000000A524B0) , 17(0000000000A524D0))
 4(0000000000A524B0) (0(0000000000000000) , 0(0000000000000000))
17(0000000000A524D0) (0(0000000000000000) , 0(0000000000000000))
34(0000000000A52450) (30(0000000000A52530) , 40(0000000000A575B0))
30(0000000000A52530) (0(0000000000000000) , 0(0000000000000000))
40(0000000000A575B0) (0(0000000000000000) , 0(0000000000000000))
70(0000000000A52470) (65(0000000000A52510) , 80(0000000000A52410))
65(0000000000A52510) (0(0000000000000000) , 0(0000000000000000))
80(0000000000A52410) (75(0000000000A524F0) , 87(0000000000A52490))
75(0000000000A524F0) (0(0000000000000000) , 0(0000000000000000))
87(0000000000A52490) (84(0000000000A52550) , 90(0000000000A575D0))
84(0000000000A52550) (0(0000000000000000) , 0(0000000000000000))
90(0000000000A575D0) (0(0000000000000000) , 0(0000000000000000))
ノード番号と回転向きを入力(例: 57 1 (1:右、2:左,0:終了)):4 1
右回転不可(左の子なし)
ノード番号と回転向きを入力(例: 57 1 (1:右、2:左,0:終了)):17 2
左回転不可(右の子なし)
ノード番号と回転向きを入力(例: 57 1 (1:右、2:左,0:終了)):84 1
右回転不可(左の子なし)
ノード番号と回転向きを入力(例: 57 1 (1:右、2:左,0:終了)):0
*/


```


# kadai13-3


## ソースコード


```c

#include <stdio.h>
#include "PLIB.h"
#define PSTACKSIZE 10000

BSTnode *node(int);
BSTnode *head;
static BSTnode * pstack[PSTACKSIZE];
static int pS_top;
static int depthcount;
void ppush(BSTnode *x){
  if(pS_top==PSTACKSIZE){
    printf("Error: Overflow\n");
    return;
  } else {
    pstack[pS_top++]  = x;
  }
}

BSTnode *ppop(void){
  if(pS_top == 0){
    printf("Error: Underflow\n");
    return NULL;
  }
  return pstack[--pS_top];
}

int depth(BSTnode *p){
  int ldepth = 0,rdepth = 0,savedepth;
  if(p==NULL) return depthcount;
  depthcount++;
  if((p->lson == NULL) && (p->rson == NULL)){
    return depthcount;
  }
  if(p->lson != NULL){
    ldepth = depth(p->lson);
  }
  if(p->rson != NULL){
    depthcount = savedepth;
    rdepth = depth(p->rson);
  }
  if(ldepth > rdepth) {
    return ldepth;
  } else {
    return rdepth;
  }
}

int blanching(BSTnode *v,int ldepth,int rdepth){
  return 0;
}
int check(){
  BSTnode *v;
  int ldepth,rdepth;
  while(1){
    if(pS_top == 0) break;
    v = ppop();
    depthcount = 0;
    ldepth = depth(v->lson);
    depthcount = 0;
    rdepth = depth(v->rson);
    printf("key=%d,ldepth=%d,rdepth=%d\n",v->key,ldepth,rdepth);
    blanching(v,ldepth,rdepth);
  }
  return 0;
}

int insert2(BSTnode **head,int x){
  BSTnode *v,*up,*nr;
  if(*head == NULL){
    *head = node(x);
    return 0;
  }
  v = *head;
  while(v != NULL){
    up = v;
    ppush(v);
    if(x < v->key) v = v->lson;
    else if (x > v->key) v = v->rson;
    else return 1;
  }
  nr = node(x);
  printf("%2d(%p) ",x,nr);
  if(x < up->key){
    up->lson = nr;
  } else {
    up->rson = nr;
  }
  return 0;
}

int main(void){
  int data,rc;
  printf("/*** アルゴリズム4.1(挿入 head=NULLから開始可能) **\n");
  head = NULL;
  pS_top = 0;
  while(1){
    printf("正整数を入力してください(-1=>print,0=>終了):");
    scanf("%d",&data);
    if(data==0) break;
    if(data<0){
      printf("(headの内容=%p)\n",head);
      printtree(head);
      continue;
    }
    rc = insert2(&head,data);
    if(rc == 0){
      printf("key=%dを追加しました\n",data);
    } else {
      printf("key=%dは既に存在します\n",data);
    }
    check();
  }
  printf("*/\n");
}



```

## 出力


```

/*** アルゴリズム4.1(挿入 head=NULLから開始可能) **
正整数を入力してください(-1=>print,0=>終了):60
key=60を追加しました
正整数を入力してください(-1=>print,0=>終了):50
50(0000000000B026D0) key=50を追加しました
key=60,ldepth=1,rdepth=0
正整数を入力してください(-1=>print,0=>終了):40
40(0000000000B07540) key=40を追加しました
key=50,ldepth=1,rdepth=0
key=60,ldepth=2,rdepth=0
正整数を入力してください(-1=>print,0=>終了):-1
(headの内容=0000000000B026B0)
60(0000000000B026B0) (50(0000000000B026D0) , 0(0000000000000000))
50(0000000000B026D0) (40(0000000000B07540) , 0(0000000000000000))
40(0000000000B07540) (0(0000000000000000) , 0(0000000000000000))
正整数を入力してください(-1=>print,0=>終了):30
30(0000000000B07560) key=30を追加しました
key=40,ldepth=1,rdepth=0
key=50,ldepth=2,rdepth=0
key=60,ldepth=3,rdepth=0
正整数を入力してください(-1=>print,0=>終了):20
20(0000000000B07580) key=20を追加しました
key=30,ldepth=1,rdepth=0
key=40,ldepth=2,rdepth=0
key=50,ldepth=3,rdepth=0
key=60,ldepth=4,rdepth=0
正整数を入力してください(-1=>print,0=>終了):-1
(headの内容=0000000000B026B0)
60(0000000000B026B0) (50(0000000000B026D0) , 0(0000000000000000))
50(0000000000B026D0) (40(0000000000B07540) , 0(0000000000000000))
40(0000000000B07540) (30(0000000000B07560) , 0(0000000000000000))
30(0000000000B07560) (20(0000000000B07580) , 0(0000000000000000))
20(0000000000B07580) (0(0000000000000000) , 0(0000000000000000))
正整数を入力してください(-1=>print,0=>終了):70
70(0000000000B075A0) key=70を追加しました
key=60,ldepth=4,rdepth=1
正整数を入力してください(-1=>print,0=>終了):45
45(0000000000B075C0) key=45を追加しました
key=40,ldepth=2,rdepth=1
key=50,ldepth=3,rdepth=0
key=60,ldepth=4,rdepth=1
正整数を入力してください(-1=>print,0=>終了):55
55(0000000000B075E0) key=55を追加しました
key=50,ldepth=3,rdepth=1
key=60,ldepth=4,rdepth=1
正整数を入力してください(-1=>print,0=>終了):-1
(headの内容=0000000000B026B0)
60(0000000000B026B0) (50(0000000000B026D0) , 70(0000000000B075A0))
50(0000000000B026D0) (40(0000000000B07540) , 55(0000000000B075E0))
40(0000000000B07540) (30(0000000000B07560) , 45(0000000000B075C0))
30(0000000000B07560) (20(0000000000B07580) , 0(0000000000000000))
20(0000000000B07580) (0(0000000000000000) , 0(0000000000000000))
45(0000000000B075C0) (0(0000000000000000) , 0(0000000000000000))
55(0000000000B075E0) (0(0000000000000000) , 0(0000000000000000))
70(0000000000B075A0) (0(0000000000000000) , 0(0000000000000000))
正整数を入力してください(-1=>print,0=>終了):0
*/



```


# kadai13-4


## ソースコード


```c

#include <stdio.h>
#include "PLIB.h"
#define PSTACKSIZE 10000

BSTnode *node(int);
BSTnode *head;
static BSTnode * pstack[PSTACKSIZE];
static int pS_top;
static int depthcount;
void ppush(BSTnode *x){
  if(pS_top==PSTACKSIZE){
    printf("Error: Overflow\n");
    return;
  } else {
    pstack[pS_top++]  = x;
  }
}

BSTnode *ppop(void){
  if(pS_top == 0){
    printf("Error: Underflow\n");
    return NULL;
  }
  return pstack[--pS_top];
}

int depth(BSTnode *p){
  int ldepth = 0,rdepth = 0,savedepth;
  if(p==NULL) return depthcount;
  depthcount++;
  if((p->lson == NULL) && (p->rson == NULL)){
    return depthcount;
  }
  savedepth = depthcount;
  if(p->lson != NULL){
    ldepth = depth(p->lson);
  }
  if(p->rson != NULL){
    depthcount = savedepth;
    rdepth = depth(p->rson);
  }
  if(ldepth > rdepth) {
    return ldepth;
  } else {
    return rdepth;
  }
}

int rotation2(BSTnode *up,BSTnode *v,int x,int rot){
  if(rot == 1) {
    if(v->lson == NULL) return 3;
    if(up==v){
      head = v->lson;
      v->lson = head->rson;
      head->rson =v;
    } else if(up->lson == v){
      up->lson = v->lson;
      v->lson = up->lson->rson;
      up->lson->rson = v;
    } else {
      up->rson = v->lson;
      v->lson = up->rson->rson;
      up->rson->rson = v;
    }
    return 0;
  }
  if(rot == 2) {
    if(v->rson == NULL) return 4;
    if(up==v){
      head = v->rson;
      v->rson = head->lson;
      head->lson = v;
    } else if(up->lson == v){
      up->lson = v->rson;
      v->rson = up->lson->lson;
      up->lson->lson = v;
    } else {
      up->rson = v->rson;
      v->rson = up->rson->lson;
      up->rson->lson = v;
    }
  }
  printf("up=%p,v=%p,x=%d,rot=%d\n",up,v,x,rot);
  return 5;
}

int rotation1(BSTnode **head,int x,int rot){
  BSTnode *v,*up;
  int rc;
  up = v = *head;
  if(head == NULL) {
    return 2;
  }
  while(v != NULL){
    if(x == v->key){
      rc = rotation2(up,v,x,rot);
      return rc;
    }
    up = v;
    if(x < v->key){
      v = v->lson;
    } else {
      v = v->rson;
    }
  }
  return 1;
}

int blanching(BSTnode *v,int ldepth,int rdepth){
  int d,lldepth,rrdepth;
  d = ldepth - rdepth;
  if(d*d < 2) return 0;
  if(ldepth > rdepth){
    depthcount = 0;
    lldepth = depth(v->lson->lson);
    depthcount = 0;
    rrdepth = depth(v->lson->rson);
    if(lldepth > rrdepth){
      rotation1(&head,v->key,1);
      printf("%dを中心に右回転しました\n",v->key);
      return 0;
    }
    if(lldepth < rrdepth){
      printf("%dを中心に左回転しました\n",v->lson->key);
      rotation1(&head,v->lson->key,2);
      printf("%dを中心に右回転しました\n",v->key);
      rotation1(&head,v->key,1);
      return 0;
    }
  }
  if(ldepth < rdepth){
    depthcount = 0;
    lldepth = depth(v->rson->lson);
    depthcount = 0;
    rrdepth = depth(v->rson->rson);
    if(lldepth < rrdepth){
      rotation1(&head,v->key,2);
      printf("%dを中心に左回転しました\n",v->key);
      return 0;
    }
    if(lldepth > rrdepth){
      printf("%dを中心に左回転しました\n",v->rson->key);
      rotation1(&head,v->rson->key,1);
      printf("%dを中心に右回転しました\n",v->key);
      rotation1(&head,v->key,2);
      return 0;
    }
  }
  return 0;
}
int check(){
  BSTnode *v;
  int ldepth,rdepth;
  while(1){
    if(pS_top == 0) break;
    v = ppop();
    depthcount = 0;
    ldepth = depth(v->lson);
    depthcount = 0;
    rdepth = depth(v->rson);
    printf("key=%d,ldepth=%d,rdepth=%d\n",v->key,ldepth,rdepth);
    blanching(v,ldepth,rdepth);
  }
  return 0;
}

int insert2(BSTnode **head,int x){
  BSTnode *v,*up,*nr;
  if(*head == NULL){
    *head = node(x);
    return 0;
  }
  v = *head;
  while(v != NULL){
    up = v;
    ppush(v);
    if(x < v->key) v = v->lson;
    else if (x > v->key) v = v->rson;
    else return 1;
  }
  nr = node(x);
  printf("%2d(%p) ",x,nr);
  if(x < up->key){
    up->lson = nr;
  } else {
    up->rson = nr;
  }
  return 0;
}

int main(void){
  int data,rc;
  printf("/*** アルゴリズム4.1(挿入 head=NULLから開始可能) **\n");
  head = NULL;
  pS_top = 0;
  while(1){
    printf("正整数を入力してください(-1=>print,0=>終了):");
    scanf("%d",&data);
    if(data==0) break;
    if(data<0){
      printf("(headの内容=%p)\n",head);
      printtree(head);
      continue;
    }
    rc = insert2(&head,data);
    if(rc == 0){
      printf("key=%dを追加しました\n",data);
    } else {
      printf("key=%dは既に存在します\n",data);
    }
    check();
  }
  printf("*/\n");
}



```

## 出力


```

/*** アルゴリズム4.1(挿入 head=NULLから開始可能) **
正整数を入力してください(-1=>print,0=>終了):60
key=60を追加しました
正整数を入力してください(-1=>print,0=>終了):50
50(00000000001926D0) key=50を追加しました
key=60,ldepth=1,rdepth=0
正整数を入力してください(-1=>print,0=>終了):40
40(0000000000197540) key=40を追加しました
key=50,ldepth=1,rdepth=0
key=60,ldepth=2,rdepth=0
60を中心に右回転しました
正整数を入力してください(-1=>print,0=>終了):41
41(0000000000197560) key=41を追加しました
key=40,ldepth=0,rdepth=1
key=50,ldepth=2,rdepth=1
正整数を入力してください(-1=>print,0=>終了):-1
(headの内容=00000000001926D0)
50(00000000001926D0) (40(0000000000197540) , 60(00000000001926B0))
40(0000000000197540) (0(0000000000000000) , 41(0000000000197560))
41(0000000000197560) (0(0000000000000000) , 0(0000000000000000))
60(00000000001926B0) (0(0000000000000000) , 0(0000000000000000))
正整数を入力してください(-1=>print,0=>終了):42
42(0000000000197580) key=42を追加しました
key=41,ldepth=0,rdepth=1
key=40,ldepth=0,rdepth=2
up=00000000001926D0,v=0000000000197540,x=40,rot=2
40を中心に左回転しました
key=50,ldepth=2,rdepth=1
正整数を入力してください(-1=>print,0=>終了):-1
(headの内容=00000000001926D0)
50(00000000001926D0) (41(0000000000197560) , 60(00000000001926B0))
41(0000000000197560) (40(0000000000197540) , 42(0000000000197580))
40(0000000000197540) (0(0000000000000000) , 0(0000000000000000))
42(0000000000197580) (0(0000000000000000) , 0(0000000000000000))
60(00000000001926B0) (0(0000000000000000) , 0(0000000000000000))
正整数を入力してください(-1=>print,0=>終了):43
43(00000000001975A0) key=43を追加しました
key=42,ldepth=0,rdepth=1
key=41,ldepth=1,rdepth=2
key=50,ldepth=3,rdepth=1
41を中心に左回転しました
up=00000000001926D0,v=0000000000197560,x=41,rot=2
50を中心に右回転しました
正整数を入力してください(-1=>print,0=>終了):-1
(headの内容=0000000000197580)
42(0000000000197580) (41(0000000000197560) , 50(00000000001926D0))
41(0000000000197560) (40(0000000000197540) , 0(0000000000000000))
40(0000000000197540) (0(0000000000000000) , 0(0000000000000000))
50(00000000001926D0) (43(00000000001975A0) , 60(00000000001926B0))
43(00000000001975A0) (0(0000000000000000) , 0(0000000000000000))
60(00000000001926B0) (0(0000000000000000) , 0(0000000000000000))
正整数を入力してください(-1=>print,0=>終了):0
*/


```


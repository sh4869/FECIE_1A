
# kadai8-1


## ソースコード


```c

#include <stdio.h>
#include <malloc.h>
#define N 100
typedef struct LIST { 
  int data;
  struct LIST *next;
} LIST;

void AL3_1(void);
void AL3_2(void);
void printlist(LIST *);
int data[N];
int main(void){
  int i = 0,x;
  printf("/*** Program 3.1-3.2 **\n");
  printf("sizeof(LIST)=%d\n",sizeof(LIST));
  printf("input integers (example 10 20 30 -1( -1 end of input))\n");
  while(1){
    scanf("%d",&x);
    data[i++] = x;
    if(x<0) break;
  }
  printf("Program 3.1(insert to the top)\n");
  AL3_1();
  printf("Program 3.2(insert to the tail)\n");
  AL3_2();
  printf("*/\n");
}

void AL3_1(void){
  LIST *head,*new_r;
  int i = 0;head = NULL;
  while(data[i] >= 0){
    new_r = (LIST *)malloc(sizeof(LIST));
    new_r->data = data[i++];
    new_r->next = head;
    head = new_r;
  }
  printlist(head);
}

void AL3_2(void){
  LIST *head,*new_r,*tail;
  int i = 0;head = NULL,tail = NULL;
  while(data[i] >= 0){
    new_r = (LIST *)malloc(sizeof(LIST));
    if(tail==NULL) {
      head = new_r;
    } else {
      tail->next = new_r;
    }
    new_r->data = data[i++];
    new_r->next = NULL;
    tail = new_r;
  }
  printlist(head);
}

void printlist(LIST *head){
  LIST *p;
  p = head;
  if(p==NULL) {
    printf("printlist : list end(head = %p)\n",p);
  }
  printf("print out from the head(head = %p)\n",head);
  while(p!=NULL){
    printf("p=%p(p->data=%d,p->next=%p)\n",p,p->data,p->next);
    if(p->next != NULL) {
      p = p->next;
    } else {
      break;
    }
  }
}

```

## 出力


```

/*** Program 3.1-3.2 **
sizeof(LIST)=16
input integers (example 10 20 30 -1( -1 end of input))
Program 3.1(insert to the top)
print out from the head(head = 00000000007A2490)
p=00000000007A2490(p->data=40,p->next=00000000007A2470)
p=00000000007A2470(p->data=30,p->next=00000000007A2450)
p=00000000007A2450(p->data=20,p->next=00000000007A2430)
p=00000000007A2430(p->data=10,p->next=0000000000000000)
Program 3.2(insert to the tail)
print out from the head(head = 00000000007A24B0)
p=00000000007A24B0(p->data=10,p->next=00000000007A24D0)
p=00000000007A24D0(p->data=20,p->next=00000000007A24F0)
p=00000000007A24F0(p->data=30,p->next=00000000007A2510)
p=00000000007A2510(p->data=40,p->next=0000000000000000)
*/



```


# kadai8-2


## ソースコード


```c

#include <stdio.h>
#include "PLIB.h"

struct LIST *head;
int N=1;
int main(void){
  struct LIST *p1,*p2;
  int i;
  printf("/*** Program 3.4 **\n");
  head = NULL;
  head = inputdata(head);
  printf("Exapmle: Deletiong og the %dth record \n",N);
  i = 1;
  p1 = head;
  p2 = p1->next;
  while((i+1<N) && (p2 != NULL)) {
    i++;
    p1 = p2;
    p2 = p1->next;
  }
  printlist(head);
  if((i+1 != N) && (i != 1)) printf("Deletion Error\n");
  else {
    p1->data = p2->data;
    p1->next = p2->next;
  }
  if(N == 1) head = p2;
  printlist(head);
  printf("*/\n");
}

```

## 出力


```

/*** Program 3.4 **
print out from the head(head = 00000000000D2430)
p=00000000000D2430(p->data=19,p->next=00000000000D2450)
p=00000000000D2450(p->data=20,p->next=00000000000D2470)
p=00000000000D2470(p->data=40,p->next=00000000000D2490)
p=00000000000D2490(p->data=50650,p->next=00000000000D24B0)
p=00000000000D24B0(p->data=32020,p->next=00000000000D24D0)
p=00000000000D24D0(p->data=430043,p->next=0000000000000000)
Exapmle: Deletiong og the 1th record 
print out from the head(head = 00000000000D2430)
p=00000000000D2430(p->data=19,p->next=00000000000D2450)
p=00000000000D2450(p->data=20,p->next=00000000000D2470)
p=00000000000D2470(p->data=40,p->next=00000000000D2490)
p=00000000000D2490(p->data=50650,p->next=00000000000D24B0)
p=00000000000D24B0(p->data=32020,p->next=00000000000D24D0)
p=00000000000D24D0(p->data=430043,p->next=0000000000000000)
print out from the head(head = 00000000000D2450)
p=00000000000D2450(p->data=20,p->next=00000000000D2470)
p=00000000000D2470(p->data=40,p->next=00000000000D2490)
p=00000000000D2490(p->data=50650,p->next=00000000000D24B0)
p=00000000000D24B0(p->data=32020,p->next=00000000000D24D0)
p=00000000000D24D0(p->data=430043,p->next=0000000000000000)
*/



```


# kadai8-3


## ソースコード


```c

#include <stdio.h>
#include <malloc.h>

typedef struct BSTnode {
  int key;
  struct BSTnode *lson;
  struct BSTnode *rson;
} BSTnode;

BSTnode *node(int data){
  BSTnode *p;
  p = (BSTnode *)malloc(sizeof(BSTnode));
  if(p != NULL){
    p->key = data;
    p->lson = NULL;
    p->rson = NULL;
  }
  return p;
}

int main(void){
  BSTnode *v,*p1,*p2,*p3;
  printf("/** Prepartion for Program 3.5 **\n");
  p1 = node(100);
  p2 = node(200);
  p3 = node(300);
  p1->lson = p2;
  p1->rson = p3;
  v=p1;
  printf("node-1 v=%p (key=%d,lson=%p,rson=%p\n",v,v->key,v->lson,v->rson);
  v=p2;
  printf("node-2 v=%p (key=%d,lson=%p,rson=%p\n",v,v->key,v->lson,v->rson);
  v=p3;
  printf("node-3 v=%p (key=%d,lson=%p,rson=%p\n",v,v->key,v->lson,v->rson);
  printf("*/\n");
}

```

## 出力


```

/** Prepartion for Program 3.5 **
node-1 v=0000000000C62430 (key=100,lson=0000000000C62450,rson=0000000000C62470
node-2 v=0000000000C62450 (key=200,lson=0000000000000000,rson=0000000000000000
node-3 v=0000000000C62470 (key=300,lson=0000000000000000,rson=0000000000000000
*/



```


# kadai8-4


## ソースコード


```c

#include <stdio.h>
#include <malloc.h>

typedef struct BSTnode {
  int key;
  struct BSTnode *lson;
  struct BSTnode *rson;
} BSTnode;

BSTnode *node(int);
void tree(BSTnode *,BSTnode *,BSTnode *);
int search(BSTnode *,int);

BSTnode *head;
int main(void){
  struct BSTnode *p50,*p9,*p81,*p5,*p21,*p62,*p92;
  int data,rc;
  printf("/*** Program 3.5 **\n");
  head = p50 = node(50);
  p9 = node(9);
  p81 = node(81);
  tree(p50,p9,p81);
  p5 = node(5);
  p21 = node(21);
  tree(p9,p5,p21);
  p62 = node(62);
  p92 = node(92);
  tree(p81,p62,p92);
  tree(p5,node(3),node(8));
  tree(p21,node(13),node(23));
  tree(p62,node(53),node(74));
  tree(p92,node(85),node(99));
  while(1){
    printf("Input a positive integer(0 indicates exit):");
    scanf("%d",&data);
    if(data<=0) break;
    rc = search(head,data);
    if(rc==0) {
      printf("find out key = %d\n",data);
    } else {
      printf("key=%d does not exist\n",data);
    }
  }
  printf("*/\n");
}

BSTnode *node(int data){
  BSTnode *p;
  p = (BSTnode *)malloc(sizeof(BSTnode));
  if(p != NULL){
    p->key = data;
    p->lson = NULL;
    p->rson = NULL;
  }
  return p;
}

void tree(BSTnode *father,BSTnode *left,BSTnode *right){
  BSTnode *p;
  int l_key,r_key;
  p=father;
  p->lson = left;
  p->rson = right;
  if(left != NULL) {
    l_key = left->key;
  } else {
    l_key = 0;
  }
  if(right != NULL) {
    r_key = right->key;
  } else {
    r_key = 0;
  }
  printf("%2d (%p), (%2d (%p),%2d (%p))\n",p->key,p,l_key,left,r_key,right);
}

int search(BSTnode *root,int x){
  BSTnode *v;
  v = root;
  while(v != NULL){
    if(x == v->key){
      printf("v=%p (key=%d)\n",v,x);
      return 0;
    }
    if(x < v->key){
      v = v->lson;
    } else {
      v = v->rson;
    }
  }
  return 1;
}



```

## 出力


```

/*** Program 3.5 **
50 (0000000000CF2430), ( 9 (0000000000CF2450),81 (0000000000CF2470))
 9 (0000000000CF2450), ( 5 (0000000000CF2490),21 (0000000000CF24B0))
81 (0000000000CF2470), (62 (0000000000CF24D0),92 (0000000000CF24F0))
 5 (0000000000CF2490), ( 3 (0000000000CF2530), 8 (0000000000CF2510))
21 (0000000000CF24B0), (13 (0000000000CF2570),23 (0000000000CF2550))
62 (0000000000CF24D0), (53 (0000000000CF25B0),74 (0000000000CF2590))
92 (0000000000CF24F0), (85 (0000000000CF7780),99 (0000000000CF25D0))
Input a positive integer(0 indicates exit):key=20 does not exist
Input a positive integer(0 indicates exit):*/



```



# hatten8-1


## ソースコード


```c

#include <stdio.h>
#include "PLIB.h"
#include <stdlib.h>

struct LIST *head;
void insert(void){
  struct LIST *new_r,*temp;
  int data,i;
  printf("please input new data\n");
  scanf("%d",&data);
  if(data < 0) return;
  new_r =  (LIST *) malloc(sizeof(LIST));
  new_r->data = data;
  new_r->next = NULL;
  printf("input for - head: 0,tail: 1");
  scanf("%d",&i);
  switch(i){
    case 0:
      new_r->next = head;
      head = new_r;
      break;
    case 1:
      temp = head;
      while(temp->next != NULL){
        temp = temp->next;
      }
      temp->next = new_r;
      break;
  }
  printlist(head);
  return;
}
void delete(void){
  struct LIST *p1,*p2;
  int n,i;
  printf("Please input number of data's number:");
  scanf("%d",&n);
  i = 1;
  p1 = head;
  p2 = p1->next;
  while((i+1<n) && (p2 != NULL)) {
    i++;
    p1 = p2;
    p2 = p1->next;
  }
  printlist(head);
  if((i+1 != n) && (i != 1)) printf("Deletion Error\n");
  else {
    p1->data = p2->data;
    p1->next = p2->next;
  }
  if(n == 1) head = p2;
  printlist(head);
}

int main(void){
  int i;
  printf("/*** Advance 8-1 **\n");
  head = NULL;
  head = inputdata(head);
  while(1){
    printf("insert: 0,delete: 1,exit: 2\n");
    scanf("%d",&i);
    switch(i){
      case 0:
        insert();
        break;
      case 1:
        delete();
        break;
      case 2:
        exit(0);
        break;
    }
  }
  printf("*/\n");
}

```

## 出力


```

/** Prepartion for Program 3.5 **
node-1 v=0000000000722430 (key=100,lson=0000000000722450,rson=0000000000722470
node-2 v=0000000000722450 (key=200,lson=0000000000000000,rson=0000000000000000
node-3 v=0000000000722470 (key=300,lson=0000000000000000,rson=0000000000000000
*/



```


# hatten8-2


## ソースコード


```c

#include <stdlib.h>
#include <stdio.h>
#define BUCKET_SIZE 15
typedef struct cell {
  int key;
  struct cell *next;
} CELL;

CELL *table[BUCKET_SIZE];
#define N 10
int keylist[N] = {22,142,56,78,72,127,29,166,788,24};

int print_hush(){
  int i;
  CELL *p;
  for(i=0;i<BUCKET_SIZE;i++){
    if(table[i] != NULL){
      printf(" table[%d] = ",i);
      for(p=table[i];p!=NULL;p=p->next){
        printf(" %d ",p->key);
      }
      printf("\n");
    }
  }
  return 0;
}

int hash(int key){
  return key % BUCKET_SIZE;
}

int init_table(){
  for(int i = 0;i < BUCKET_SIZE; i++){
    table[i] = NULL;
  }
  return 0;
}

int find(int key){
  CELL *p;
  for(p = table[hash(key)];p!=NULL;p = p->next){
    if(key == p->key) {
      return p->key;
    }
  }
  return -1;
}

int insert(int key){
  CELL *p;
  int h;
  if(find(key) != -1) return 0;
  if((p = (CELL *)malloc(sizeof(CELL))) == NULL){
    fprintf(stderr,"out of memory\n");
    exit(-1);
  }
  h = hash(key);
  p->key = key;
  p->next = table[h];
  table[h] = p;
  return 1;
}

int delet(int key){
  int h;
  CELL *p,*q;
  h = hash(key);
  if(table[h] == NULL) return 0;
  if(key == table[h]->key){
    p = table[h];
    table[h] = p->next;
    free(p);
    return 1;
  }
  for(q=table[h],p=q->next;p!=NULL;q=p,p=p->next){
    if(key == p->key){
      q->next = p->next;
      free(p);
      return 1;
    }
  }
  return 0;
}

int main(void){
  int i;
  CELL *p;
  init_table();
  printf("/* Chain Hush Program \n");
  for(i=0;i<N;i++){
    if(insert(keylist[i]) == 0){
      printf("key %d insertion fail\n",keylist[i]);
    }
  }
  printf("Verify insertion results\n");
  print_hush();
  if(delet(788)==0){
    printf("Key does not exists!\n");
  } else {
    printf("Deletion of 788\n");
    print_hush();
  }

  printf("*/\n");
}


```

## 出力


```

/* Chain Hush Program 
Verify insertion results
 table[1] =  166 
 table[3] =  78 
 table[7] =  127  142  22 
 table[8] =  788 
 table[9] =  24 
 table[11] =  56 
 table[12] =  72 
 table[14] =  29 
Deletion of 788
 table[1] =  166 
 table[3] =  78 
 table[7] =  127  142  22 
 table[9] =  24 
 table[11] =  56 
 table[12] =  72 
 table[14] =  29 
*/



```


# hatten8-3


## ソースコード


```c

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define BUCKET_SIZE 50

typedef struct cell {
  int key;
  struct cell *next;
} CELL;

CELL *table[BUCKET_SIZE];
#define N 50

int print_hush(){
  int i;
  CELL *p;
  for(i=0;i<BUCKET_SIZE;i++){
    if(table[i] != NULL){
      printf(" table[%d] = ",i);
      for(p=table[i];p!=NULL;p=p->next){
        printf(" %d ",p->key);
      }
      printf("\n");
    }
  }
  return 0;
}

int hash(int key){
  return key % BUCKET_SIZE;
}

int init_table(){
  for(int i = 0;i < BUCKET_SIZE; i++){
    table[i] = NULL;
  }
  return 0;
}

int find(int key,int *count){
  CELL *p;
  *count = 0;
  for(p = table[hash(key)];p!=NULL;p = p->next){
    *count += 1;
    if(key == p->key) {
      return p->key;
    }
  }
  return -1;
}

int insert(int key,int * c){
  CELL *p;
  int h,count;
  if(find(key,&count) != -1) {
    if(c != NULL){
      *c = count;
    }
    return 0;
  }
  if((p = (CELL *)malloc(sizeof(CELL))) == NULL){
    fprintf(stderr,"out of memory\n");
    exit(-1);
  }
  h = hash(key);
  p->key = key;
  p->next = table[h];
  table[h] = p;
  if(c != NULL){
    *c = count;
  }
  return 1;
}

int delet(int key){
  int h;
  CELL *p,*q;
  h = hash(key);
  if(table[h] == NULL) return 0;
  if(key == table[h]->key){
    p = table[h];
    table[h] = p->next;
    free(p);
    return 1;
  }
  for(q=table[h],p=q->next;p!=NULL;q=p,p=p->next){
    if(key == p->key){
      q->next = p->next;
      free(p);
      return 1;
    }
  }
  return 0;
}

int main(void){
  int i,rnd,cnt,sum = 0;
  CELL *p;
  srand((unsigned)time(NULL));
  init_table();
  printf("/* Chain Hush Program \n");
  for(i=0;i<N/2;i++){
    insert(rand()%500,NULL);
  }
  for(i=0;i<20;i++){
    rnd = rand()%500;
    if(insert(rnd,&cnt) == 1){
      delet(rnd);
    }
    sum += cnt;
  }
  printf("N/2登録されている状態での新規登録時のポインタ操作回数平均: %f\n",(double)sum / (double)20.0);
  print_hush();

  sum = 0;
  for(i=0;i<N/2;i++){
    insert(rand()%500,NULL);
  }
  for(i=0;i<20;i++){
    rnd = rand()%500;
    if(insert(rnd,&cnt) == 1){
      delet(rnd);
    }
    sum += cnt;
  }
  printf("N登録されている状態での新規登録時のポインタ操作回数平均: %f\n",(double)sum / (double)20.0);
  print_hush();

  sum = 0;
  for(i=0;i<N;i++){
    insert(rand()%500,NULL);
  }
  for(i=0;i<20;i++){
    rnd = rand()%500;
    if(insert(rnd,&cnt) == 1){
      delet(rnd);
    }
    sum += cnt;
  }
  printf("2N登録されている状態での新規登録時のポインタ操作回数平均: %f\n",(double)sum / (double)20.0);
  print_hush();

  sum = 0;
  for(i=0;i<N;i++){
    insert(rand()%500,NULL);
  }
  for(i=0;i<20;i++){
    rnd = rand()%500;
    if(insert(rnd,&cnt) == 1){
      delet(rnd);
    }
    sum += cnt;
  }
  printf("3N登録されている状態での新規登録時のポインタ操作回数平均: %f\n",(double)sum / (double)20.0);
  print_hush();
  printf("*/\n");
}


```

## 出力


```

/* Chain Hush Program 
N/2登録されている状態での新規登録時のポインタ操作回数平均: 0.600000
 table[1] =  351  401 
 table[7] =  57  7  407 
 table[9] =  259 
 table[11] =  411 
 table[15] =  165 
 table[16] =  16 
 table[17] =  167 
 table[18] =  468 
 table[28] =  128 
 table[29] =  129 
 table[32] =  482  382 
 table[33] =  283  433 
 table[35] =  35 
 table[38] =  288  438 
 table[43] =  493 
 table[45] =  395  45 
N登録されている状態での新規登録時のポインタ操作回数平均: 0.700000
 table[1] =  351  401 
 table[3] =  153  203 
 table[7] =  57  7  407 
 table[8] =  158 
 table[9] =  259 
 table[11] =  411 
 table[15] =  15  165 
 table[16] =  216  16 
 table[17] =  267  317  167 
 table[18] =  318  468 
 table[19] =  419 
 table[22] =  372 
 table[27] =  277 
 table[28] =  378  178  128 
 table[29] =  129 
 table[30] =  430 
 table[32] =  482  382 
 table[33] =  483  283  433 
 table[34] =  384 
 table[35] =  485  35 
 table[36] =  436  286 
 table[38] =  238  388  288  438 
 table[40] =  390 
 table[43] =  493 
 table[45] =  395  45 
 table[46] =  446 
 table[49] =  299 
2N登録されている状態での新規登録時のポインタ操作回数平均: 1.350000
 table[0] =  50  400 
 table[1] =  351  401 
 table[3] =  3  153  203 
 table[4] =  204 
 table[7] =  457  57  7  407 
 table[8] =  158 
 table[9] =  259 
 table[10] =  60 
 table[11] =  61  411 
 table[13] =  263  13 
 table[15] =  465  365  15  165 
 table[16] =  216  16 
 table[17] =  267  317  167 
 table[18] =  318  468 
 table[19] =  419 
 table[22] =  172  122  472  372 
 table[23] =  23 
 table[24] =  224 
 table[26] =  276 
 table[27] =  127  377  277 
 table[28] =  478  278  378  178  128 
 table[29] =  129 
 table[30] =  280  430 
 table[31] =  131  381 
 table[32] =  282  482  382 
 table[33] =  333  383  483  283  433 
 table[34] =  234  434  384 
 table[35] =  485  35 
 table[36] =  136  436  286 
 table[37] =  87 
 table[38] =  238  388  288  438 
 table[39] =  39 
 table[40] =  390 
 table[42] =  492  392 
 table[43] =  493 
 table[44] =  294  344  194 
 table[45] =  95  145  395  45 
 table[46] =  346  146  446 
 table[48] =  498 
 table[49] =  399  299 
3N登録されている状態での新規登録時のポインタ操作回数平均: 2.250000
 table[0] =  50  400 
 table[1] =  101  1  451  351  401 
 table[2] =  52  402 
 table[3] =  3  153  203 
 table[4] =  454  204 
 table[6] =  306 
 table[7] =  457  57  7  407 
 table[8] =  158 
 table[9] =  359  259 
 table[10] =  60 
 table[11] =  61  411 
 table[12] =  162 
 table[13] =  213  263  13 
 table[15] =  215  465  365  15  165 
 table[16] =  216  16 
 table[17] =  267  317  167 
 table[18] =  68  418  318  468 
 table[19] =  419 
 table[22] =  72  172  122  472  372 
 table[23] =  73  23 
 table[24] =  224 
 table[25] =  375 
 table[26] =  276 
 table[27] =  127  377  277 
 table[28] =  228  478  278  378  178  128 
 table[29] =  129 
 table[30] =  180  130  280  430 
 table[31] =  131  381 
 table[32] =  232  282  482  382 
 table[33] =  333  383  483  283  433 
 table[34] =  284  234  434  384 
 table[35] =  135  485  35 
 table[36] =  136  436  286 
 table[37] =  87 
 table[38] =  138  238  388  288  438 
 table[39] =  439  39 
 table[40] =  40  290  390 
 table[41] =  241 
 table[42] =  292  492  392 
 table[43] =  293  393  493 
 table[44] =  294  344  194 
 table[45] =  245  95  145  395  45 
 table[46] =  296  346  146  446 
 table[47] =  47 
 table[48] =  298  398  248  448  498 
 table[49] =  399  299 
*/



```


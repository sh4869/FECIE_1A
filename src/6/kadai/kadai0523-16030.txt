
# hatten6-1


## ソースコード


```c

#include <stdio.h>
#define N 18
#define m 27
static int s[N] = {3,4,6,7,9,11,14,15,17,18,20,23,24,26,27,29,30,32};
int hash(int,int);
int search(int, int*);
void make_htb(int *,int *);
int main(void){
  int htb[m],i,x,rc;
  printf("/*** アルゴリズム2.9 (ハッシュ法) **\n");
  make_htb(s,htb);
  printf("(教科書32頁 図2.7参照)\n");
  for(i=0;i<m;i++){
    printf("htb[%2d]=%2d ",i,htb[i]);
    if(((i+1)/7)*7==(i+1)) printf("\n");
  }
  printf("\n探索するデータxを入力して下さい(半角正整数)\n");
  scanf("%d",&x);
  rc = search(x,htb);
  if(rc >= 0) {
    printf("rc = %d (x=%d,htb[%d]=%d",rc,x,rc,htb[rc]);
  } else {
    printf("rc=%d ( ** %d not found **)",rc,x);
  }
  printf("\n*/\n");
  return 0;
}

int search(int x,int *htb){
  int k = 1;
  int j = hash(x,k);
  while(htb[j] != x) {
    k++;
    j = hash(x,k);
  }
  if(htb[j] == x) return j;
  else return -1;
}

void make_htb(int *s,int *htb) {
  int i,j,x,k;
  for(i=0;i<m;i++) htb[i] = 0;
  for(i=0;i<N;i++){
    k = 1;
    x = s[i];
    j = hash(x,k);
    while(htb[j] != 0) {
      k++;
      j = hash(x,k);
    }
    htb[j] = x;
  }
}

int hash(int x,int k){
  return (x  + (3 * (k-1) * x)) % m;
}


```

## 出力


```

/*** アルゴリズム2.9 (ハッシュ法) **
(教科書32頁 図2.7参照)
htb[ 0]=27 htb[ 1]= 0 htb[ 2]=29 htb[ 3]= 3 htb[ 4]= 4 htb[ 5]=32 htb[ 6]= 6
htb[ 7]= 7 htb[ 8]= 0 htb[ 9]= 9 htb[10]= 0 htb[11]=11 htb[12]=30 htb[13]= 0
htb[14]=14 htb[15]=15 htb[16]= 0 htb[17]=17 htb[18]=18 htb[19]= 0 htb[20]=20
htb[21]= 0 htb[22]= 0 htb[23]=23 htb[24]=24 htb[25]= 0 htb[26]=26
探索するデータxを入力して下さい(半角正整数)
32
rc = 5 (x=32,htb[5]=32
*/
```


# hatten6-2


## ソースコード


```c

#include <stdio.h>
#define N 18
#define m 27
static int s[N] = {3,4,6,7,9,11,14,15,17,18,20,23,24,26,27,29,30,32};
int hash(int);
int search(int, int*);
void make_htb(int *,int *);
int main(void){
  int htb[m],i,x,rc;
  printf("/*** アルゴリズム2.9 (ハッシュ法) **\n");
  make_htb(s,htb);
  printf("(教科書32頁 図2.7参照)\n");
  for(i=0;i<m;i++){
    printf("htb[%2d]=%2d ",i,htb[i]);
    if(((i+1)/7)*7==(i+1)) printf("\n");
  }
  for(i=0;i<N;i++){
    rc = search(s[i],htb);
    printf("rc = %d (x=%d,htb[%d]=%d)\n",rc,x,rc,htb[rc]);
  }
  printf("\n*/\n");
  return 0;
}

int search(int x,int *htb){
  int j = hash(x);
  int c = 0;
  while(htb[j] != x) { 
    j = (j+1)%m;
    c++;
  }
  printf("衝突回数:%d\n",c);
  if(htb[j] == x) return j;
  else return -1;
}

void make_htb(int *s,int *htb) {
  int i,j,x,c = 0;
  for(i=0;i<m;i++) htb[i] = 0;
  for(i=0;i<N;i++){
    x = s[i];
    j = hash(x);
    while(htb[j] != 0){
      j = (j+1) % m;
      c++;
    }
    htb[j] = x;
  }
  printf("衝突回数:%d\n",c);
}


int hash(int x){
  return (x%m);
}



```

## 出力


```

/*** アルゴリズム2.9 (ハッシュ法) **
衝突回数:5
(教科書32頁 図2.7参照)
htb[ 0]=27 htb[ 1]= 0 htb[ 2]=29 htb[ 3]= 3 htb[ 4]= 4 htb[ 5]=30 htb[ 6]= 6 
htb[ 7]= 7 htb[ 8]=32 htb[ 9]= 9 htb[10]= 0 htb[11]=11 htb[12]= 0 htb[13]= 0 
htb[14]=14 htb[15]=15 htb[16]= 0 htb[17]=17 htb[18]=18 htb[19]= 0 htb[20]=20 
htb[21]= 0 htb[22]= 0 htb[23]=23 htb[24]=24 htb[25]= 0 htb[26]=26 衝突回数:0
rc = 3 (x=0,htb[3]=3)
衝突回数:0
rc = 4 (x=0,htb[4]=4)
衝突回数:0
rc = 6 (x=0,htb[6]=6)
衝突回数:0
rc = 7 (x=0,htb[7]=7)
衝突回数:0
rc = 9 (x=0,htb[9]=9)
衝突回数:0
rc = 11 (x=0,htb[11]=11)
衝突回数:0
rc = 14 (x=0,htb[14]=14)
衝突回数:0
rc = 15 (x=0,htb[15]=15)
衝突回数:0
rc = 17 (x=0,htb[17]=17)
衝突回数:0
rc = 18 (x=0,htb[18]=18)
衝突回数:0
rc = 20 (x=0,htb[20]=20)
衝突回数:0
rc = 23 (x=0,htb[23]=23)
衝突回数:0
rc = 24 (x=0,htb[24]=24)
衝突回数:0
rc = 26 (x=0,htb[26]=26)
衝突回数:0
rc = 0 (x=0,htb[0]=27)
衝突回数:0
rc = 2 (x=0,htb[2]=29)
衝突回数:2
rc = 5 (x=0,htb[5]=30)
衝突回数:3
rc = 8 (x=0,htb[8]=32)

*/


```


# kadai6-1


## ソースコード


```c

#include <stdio.h>
#define N 8
int s[N] = {13,30,42,87,10,60,50,25};
int search_2_1(int,int *,int);

int main(void){
  int rc;
  printf("/*** アルゴリズム 2.1**\n");
  rc = search_2_1(60,s,N);
  printf("(1) rc=%d\n",rc);

  rc = search_2_1(55,s,N);
  printf("(2) rc=%d\n",rc);

  printf("*/\n");
  return 0;
}

int search_2_1(int x,int *s,int n){
  int i;
  i = 0;
  do {
    if(x==s[i]) return i;
    else i++;
  } while(i<n);
  return -1;
}

```

## 出力


```

/*** アルゴリズム 2.1**
(1) rc=5
(2) rc=-1
*/


```


# kadai6-2


## ソースコード


```c

#include <stdio.h>
#define N 18
int s[N] = {3,4,6,7,9,11,14,15,17,18,20,23,24,26,27,29,30,32};
int search_2_2(int, int *,int);

int main(void){
  int rc;
  printf("/*** アルゴリズム2.2 **\n");
  rc = search_2_2(23,s,N);
  printf("rc=%d\n",rc);
  rc = search_2_2(16,s,N);
  printf("rc=%d\n",rc);
  printf("*/\n");
  return 0;
}

int search_2_2(int x,int *s,int n){
  int i;
  i = 0;
  do {
    if(x==s[i]) break;
    else i++;
  } while(i < n);
  if(i < n) return i;
  return -1;
}

```

## 出力


```

/*** アルゴリズム2.2 **
rc=11
rc=-1
*/


```


# kadai6-3


## ソースコード


```c

#include <stdio.h>
#include <math.h>
#include "PLIB.h"
#define N 18
int s[N] = {3,4,6,7,9,11,14,15,17,18,20,23,24,26,27,29,30,32};
int search_2_3(int,int,int *,int);

int main(void){
  int x,n,m,m1,m2,rc;
  double y=2.001,z=2.7;
  printf("/*** アルゴリズム2.3 **\n");
  printf("case-0: cellingP(%f)=%d,cellingP(%f)=%d\n",y,(int)cellingP(y),z,(int)cellingP(z));
  n = 18;
  m1 = 6;
  m2 = 7;
  printf("n=%d;m1=%d;m2=%d\n",n,m1,m2);
  printf("case-1:(int)cellingP(n/m1)=%d,(int)cellingP(n/m2)=%d\n",(int)cellingP(n/m1),(int)cellingP(n/m2));
  printf("case-1:(int)cellingP((double)n/m1)=%d,(int)cellingP((double)n/m2)=%d\n",(int)cellingP((double)n/m1),(int)cellingP((double)n/m2));
  printf("\n質問の数値xとブロック数mを入力(例: 18 5 (終了は 0 0))\n");
  while(1){
    scanf("%d %d",&x,&m);
    if((m>N)||(m<=0)||(x==0)) break;
    rc = search_2_3(x,m,s,N);
    printf("rc=%d ",rc);
    if(rc>=0) printf("(s[%d]=%d)",rc,s[rc]);
    else printf("(%d: Not Found)",x);
    printf("\n質問の数値xとブロック数mを入力(例: 18 5 (終了は 0 0))\n");
  }
  printf("*/\n");
}

int search_2_3(int x,int m,int *s,int n){
  int i,j,k,t;
  k = (int)cellingP((double)n/m);
  j = 0;
  while(j<=m-2){
    if(x <= s[(j+1)*k - 1]) break;
    else j++;
  }
  i = j*k;
  t = ((j+1)*k - 1 <= n-1) ? (j+1)*k-1 : n-1;
  while(i<t){
    if(x<=s[i]) break;
    else i++;
  }
  if(x==s[i]) return i;
  return -1;
}

```

## 出力


```

/*** アルゴリズム2.3 **
case-0: cellingP(2.001000)=3,cellingP(2.700000)=3
n=18;m1=6;m2=7
case-1:(int)cellingP(n/m1)=3,(int)cellingP(n/m2)=2
case-1:(int)cellingP((double)n/m1)=3,(int)cellingP((double)n/m2)=3

質問の数値xとブロック数mを入力(例: 18 5 (終了は 0 0))
32 6
rc=17 (s[17]=32)
質問の数値xとブロック数mを入力(例: 18 5 (終了は 0 0))
32 7
rc=17 (s[17]=32)
質問の数値xとブロック数mを入力(例: 18 5 (終了は 0 0))
12 7
rc=-1 (12: Not Found)
質問の数値xとブロック数mを入力(例: 18 5 (終了は 0 0))
12 5
rc=-1 (12: Not Found)
質問の数値xとブロック数mを入力(例: 18 5 (終了は 0 0))
0 0
*/
```


# kadai6-4


## ソースコード


```c

#include <stdio.h>
#define N 18
#define m 27
static int s[N] = {3,4,6,7,9,11,14,15,17,18,20,23,24,26,27,29,30,32};
int hash(int);
int main(void){
  int htb[m],i,j,x;
  printf("/*** アルゴリズム2.8 **\n");
  for(i=0;i<m;i++) htb[i] = 0;
  for(i=0;i<N;i++){
    x = s[i];
    j = hash(x);
    while(htb[j] != 0) j++;
    htb[j] = x;
  }
  printf("(教科書32頁 図2.7参照\n");
  for(i=0;i<m;i++){
    printf("htb[%2d]=%2d ",i,htb[i]);
    if(((i+1)/7)*7==(i+1)) printf("\n");
  }
  printf("\n*/\n");
}

int hash(int x){
  return (x%m);
}



```

## 出力


```

/*** アルゴリズム2.8 **
(教科書32頁 図2.7参照
htb[ 0]=27 htb[ 1]= 0 htb[ 2]=29 htb[ 3]= 3 htb[ 4]= 4 htb[ 5]=30 htb[ 6]= 6 
htb[ 7]= 7 htb[ 8]=32 htb[ 9]= 9 htb[10]= 0 htb[11]=11 htb[12]= 0 htb[13]= 0 
htb[14]=14 htb[15]=15 htb[16]= 0 htb[17]=17 htb[18]=18 htb[19]= 0 htb[20]=20 
htb[21]= 0 htb[22]= 0 htb[23]=23 htb[24]=24 htb[25]= 0 htb[26]=26 
*/


```


# kadai6-5


## ソースコード


```c

#include <stdio.h>
#define N 18
#define m 27
static int s[N] = {3,4,6,7,9,11,14,15,17,18,20,23,24,26,27,29,30,32};
int hash(int);
int search(int, int*);
void make_htb(int *,int *);
int main(void){
  int htb[m],i,x,rc;
  printf("/*** アルゴリズム2.9 (ハッシュ法) **\n");
  make_htb(s,htb);
  printf("(教科書32頁 図2.7参照)\n");
  for(i=0;i<m;i++){
    printf("htb[%2d]=%2d ",i,htb[i]);
    if(((i+1)/7)*7==(i+1)) printf("\n");
  }
  printf("\n探索するデータxを入力して下さい(半角正整数)\n");
  scanf("%d",&x);
  rc = search(x,htb);
  if(rc >= 0) {
    printf("rc = %d (x=%d,htb[%d]=%d",rc,x,rc,htb[rc]);
  } else {
    printf("rc=%d ( ** %d not found **)",rc,x);
  }
  printf("\n*/\n");
  return 0;
}

int search(int x,int *htb){
  int j = hash(x);
  while(htb[j] != x) j = (j+1)%m;
  if(htb[j] == x) return j;
  else return -1;
}

void make_htb(int *s,int *htb) {
  int i,j,x;
  for(i=0;i<m;i++) htb[i] = 0;
  for(i=0;i<N;i++){
    x = s[i];
    j = hash(x);
    while(htb[j] != 0) j = (j+1) % m;
    htb[j] = x;
  }
}


int hash(int x){
  return (x%m);
}



```

## 出力


```

/*** アルゴリズム2.9 (ハッシュ法) **
(教科書32頁 図2.7参照)
htb[ 0]=27 htb[ 1]= 0 htb[ 2]=29 htb[ 3]= 3 htb[ 4]= 4 htb[ 5]=30 htb[ 6]= 6
htb[ 7]= 7 htb[ 8]=32 htb[ 9]= 9 htb[10]= 0 htb[11]=11 htb[12]= 0 htb[13]= 0
htb[14]=14 htb[15]=15 htb[16]= 0 htb[17]=17 htb[18]=18 htb[19]= 0 htb[20]=20
htb[21]= 0 htb[22]= 0 htb[23]=23 htb[24]=24 htb[25]= 0 htb[26]=26
探索するデータxを入力して下さい(半角正整数)
32
rc = 8 (x=32,htb[8]=32
*/
```


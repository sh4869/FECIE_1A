
# kadai10-1


## ソースコード


```c

#include <stdio.h>
#define HEAPSIZE 1000
#define INITSIZE 9
void printheap(int *heap,int n){
  int i;
  printf("heap(n = %02d) ",n);
  for(i=1;i<=n;i++){
    printf("%2d ",heap[i]);
  }
  printf("\n");
}

static int heapdata[INITSIZE] = {9,5,13,32,29,18,72,35,47};
static int heap[HEAPSIZE];
static int n;
void PushHeap(int);
int main(void){
  int data;
  int i;
  printf("/*** Program 3.13 **\n");
  n = 0;
  printf("--start --\n");
  heap[0] = 0;
  for(i=0;i<INITSIZE;i++){
    PushHeap(heapdata[i]);
  }
  while(1){
    printf("input additional data (0 => end) :");
    scanf("%d",&data);
    if(data<=0) break;
    PushHeap(data);
  }
  printf("*/\n");
}

void PushHeap(int x){
  int i,j;
  if(++n >= HEAPSIZE){
    printf("Heap Overflow\n");
    return;
  } else {
    heap[n] = x;
    i = n;
    j = n / 2;
    while((j > 0) && (x > heap[j])){
      heap[i] = heap[j];
      i = j;
      j = i/2;
    }
    heap[i] = x;
    printf("(add %2d) - ",x);
    printheap(heap,n);
  }
}

```

## 出力


```

/*** Program 3.13 **
--start --
(add  9) - heap(n = 01)  9 
(add  5) - heap(n = 02)  9  5 
(add 13) - heap(n = 03) 13  5  9 
(add 32) - heap(n = 04) 32 13  9  5 
(add 29) - heap(n = 05) 32 29  9  5 13 
(add 18) - heap(n = 06) 32 29 18  5 13  9 
(add 72) - heap(n = 07) 72 29 32  5 13  9 18 
(add 35) - heap(n = 08) 72 35 32 29 13  9 18  5 
(add 47) - heap(n = 09) 72 47 32 35 13  9 18  5 29 
input additional data (0 => end) :(add  1) - heap(n = 10) 72 47 32 35 13  9 18  5 29  1 
input additional data (0 => end) :(add  3) - heap(n = 11) 72 47 32 35 13  9 18  5 29  1  3 
input additional data (0 => end) :(add 30) - heap(n = 12) 72 47 32 35 13 30 18  5 29  1  3  9 
input additional data (0 => end) :(add 44) - heap(n = 13) 72 47 44 35 13 32 18  5 29  1  3  9 30 
input additional data (0 => end) :(add 32) - heap(n = 14) 72 47 44 35 13 32 32  5 29  1  3  9 30 18 
input additional data (0 => end) :(add 45) - heap(n = 15) 72 47 45 35 13 32 44  5 29  1  3  9 30 18 32 
input additional data (0 => end) :(add 65) - heap(n = 16) 72 65 45 47 13 32 44 35 29  1  3  9 30 18 32  5 
input additional data (0 => end) :(add 21) - heap(n = 17) 72 65 45 47 13 32 44 35 29  1  3  9 30 18 32  5 21 
input additional data (0 => end) :*/



```


# kadai10-2


## ソースコード


```c

#include <stdio.h>
#define HEAPSIZE 1000
#define INITSIZE 9
void printheap(int *heap,int n){
  int i;
  printf("heap(n = %02d) ",n);
  for(i=1;i<=n;i++){
    printf("%2d ",heap[i]);
  }
  printf("\n");
}

static int heapdata[INITSIZE] = {9,5,13,32,29,18,72,35,47};
static int heap[HEAPSIZE];
static int n;
void PushHeap(int);
int main(void){
  int data;
  int i;
  printf("/*** Program 3.13 **\n");
  n = 0;
  printf("--start --\n");
  heap[0] = 0;
  for(i=0;i<INITSIZE;i++){
    PushHeap(heapdata[i]);
  }
  while(1){
    printf("input additional data (0 => end) :");
    scanf("%d",&data);
    if(data<=0) break;
    PushHeap(data);
  }
  printf("*/\n");
}

void PushHeap(int x){
  int i,j;
  if(++n >= HEAPSIZE){
    printf("Heap Overflow\n");
    return;
  } else {
    heap[n] = x;
    i = n;
    j = n / 2;
    printf("(add %2d) - ",x);
    while((j > 0) && (x > heap[j])){
      printf("heap[%d]=%d  <-> heap[%d]=%d ",i,heap[i],j,heap[j]);
      heap[i] = heap[j];
      i = j;
      j = i/2;
    }
    printf("\n");
    heap[i] = x;
    printheap(heap,n);
  }
}

```

## 出力


```

/*** Program 3.13 **
--start --
(add  9) - 
heap(n = 01)  9 
(add  5) - 
heap(n = 02)  9  5 
(add 13) - heap[3]=13  <-> heap[1]=9 
heap(n = 03) 13  5  9 
(add 32) - heap[4]=32  <-> heap[2]=5 heap[2]=5  <-> heap[1]=13 
heap(n = 04) 32 13  9  5 
(add 29) - heap[5]=29  <-> heap[2]=13 
heap(n = 05) 32 29  9  5 13 
(add 18) - heap[6]=18  <-> heap[3]=9 
heap(n = 06) 32 29 18  5 13  9 
(add 72) - heap[7]=72  <-> heap[3]=18 heap[3]=18  <-> heap[1]=32 
heap(n = 07) 72 29 32  5 13  9 18 
(add 35) - heap[8]=35  <-> heap[4]=5 heap[4]=5  <-> heap[2]=29 
heap(n = 08) 72 35 32 29 13  9 18  5 
(add 47) - heap[9]=47  <-> heap[4]=29 heap[4]=29  <-> heap[2]=35 
heap(n = 09) 72 47 32 35 13  9 18  5 29 
input additional data (0 => end) :(add 10) - 
heap(n = 10) 72 47 32 35 13  9 18  5 29 10 
input additional data (0 => end) :(add 20) - heap[11]=20  <-> heap[5]=13 
heap(n = 11) 72 47 32 35 20  9 18  5 29 10 13 
input additional data (0 => end) :(add 30) - heap[12]=30  <-> heap[6]=9 
heap(n = 12) 72 47 32 35 20 30 18  5 29 10 13  9 
input additional data (0 => end) :(add 33) - heap[13]=33  <-> heap[6]=30 heap[6]=30  <-> heap[3]=32 
heap(n = 13) 72 47 33 35 20 32 18  5 29 10 13  9 30 
input additional data (0 => end) :(add 40) - heap[14]=40  <-> heap[7]=18 heap[7]=18  <-> heap[3]=33 
heap(n = 14) 72 47 40 35 20 32 33  5 29 10 13  9 30 18 
input additional data (0 => end) :(add 50) - heap[15]=50  <-> heap[7]=33 heap[7]=33  <-> heap[3]=40 
heap(n = 15) 72 47 50 35 20 32 40  5 29 10 13  9 30 18 33 
input additional data (0 => end) :(add 20) - heap[16]=20  <-> heap[8]=5 
heap(n = 16) 72 47 50 35 20 32 40 20 29 10 13  9 30 18 33  5 
input additional data (0 => end) :*/



```


# kadai10-3


## ソースコード


```c

#include <stdio.h>
#include "PLIB.h"
#define HEAPSIZE 1000
static int heap[HEAPSIZE] = {0,72,46,47,18,35,32,13,5,9,29};
static int n = 10;

int Deletemax(void);
int main(void){
  printf("/*** プログラム3.14 **\n");
  printheap(heap,n);
  printf("Deletemax()%d\n",Deletemax());
  printheap(heap,n);
  printf("Deletemax()%d\n",Deletemax());
  printheap(heap,n);
  printf("Deletemax()%d\n",Deletemax());
  printheap(heap,n);
  printf("*/\n");
}

int Deletemax(void){
  int x,i,j,t;
  if(n==0){
    printf("Heap Underflow\n");
    return -1;
  } else {
    x = heap[1];
    heap[1] = heap[n--];
    i = 1;
    while(i*2<=n){
      j = i*2;
      if(i*2+1 <= n && heap[i*2] < heap[i*2+1]){
        j = i*2 + 1;
      }
      if(heap[i] >= heap[j]) {
        break;
      } else {
        t = heap[i];
        heap[i] = heap[j];
        heap[j] = t;
      }
      i = j;
    }
  }
  return x;
}


```

## 出力


```

/*** プログラム3.14 **
heap(n = 10) 72 46 47 18 35 32 13  5  9 29 
Deletemax()72
heap(n = 09) 47 46 32 18 35 29 13  5  9 
Deletemax()47
heap(n = 08) 46 35 32 18  9 29 13  5 
Deletemax()46
heap(n = 07) 35 18 32  5  9 29 13 
*/



```


# kadai10-4


## ソースコード


```c

#include <stdio.h>
#include "PLIB.h"
#define HEAPSIZE 1000
#define INITSIZE 9

static int heap[HEAPSIZE];
static int n;

int Deletemax(void){
  int x,i,j,t;
  if(n==0){
    printf("Heap Underflow\n");
    return -1;
  } else {

    x = heap[1];
    heap[1] = heap[n--];
    i = 1;
    printf("Delete %d - ",x);
    while(i*2<=n){
      j = i*2;
      if(i*2+1 <= n && heap[i*2] < heap[i*2+1]){
        j = i*2 + 1;
      }
      if(heap[i] >= heap[j]) {
        break;
      } else {
        printf("heap[%d]=%d <-> heap[%d]=%d ",i,heap[i],j,heap[j]);
        t = heap[i];
        heap[i] = heap[j];
        heap[j] = t;
      }
      i = j;
    }
  }
  return x;
}

void PushHeap(int x){
  int i,j;
  if(++n >= HEAPSIZE){
    printf("Heap Overflow\n");
    return;
  } else {
    heap[n] = x;
    i = n;
    j = n / 2;
    printf("(add %2d) - ",x);
    while((j > 0) && (x > heap[j])){
      printf("heap[%d]=%d  <-> heap[%d]=%d ",i,heap[i],j,heap[j]);
      heap[i] = heap[j];
      i = j;
      j = i/2;
    }
    printf("\n");
    heap[i] = x;
    printheap(heap,n);
  }
}

int main(void){
  int data;
  int i;
  printf("\n");
  n = 0;
  printf("--start --\n");
  heap[0] = 0;
  while(1){
    printf("input additional data (0 => end, Negative => DeleteMax) :");
    scanf("%d",&data);
    if(data<0) {
      Deletemax();
    } else if (data > 0){
      PushHeap(data);
    } else {
      break;
    }
  }
}


```

## 出力


```


--start --
input additional data (0 => end, Negative => DeleteMax) :(add 10) - 
heap(n = 01) 10 
input additional data (0 => end, Negative => DeleteMax) :(add 20) - heap[2]=20  <-> heap[1]=10 
heap(n = 02) 20 10 
input additional data (0 => end, Negative => DeleteMax) :(add 30) - heap[3]=30  <-> heap[1]=20 
heap(n = 03) 30 10 20 
input additional data (0 => end, Negative => DeleteMax) :(add 49) - heap[4]=49  <-> heap[2]=10 heap[2]=10  <-> heap[1]=30 
heap(n = 04) 49 30 20 10 
input additional data (0 => end, Negative => DeleteMax) :(add 10) - 
heap(n = 05) 49 30 20 10 10 
input additional data (0 => end, Negative => DeleteMax) :(add 123) - heap[6]=123  <-> heap[3]=20 heap[3]=20  <-> heap[1]=49 
heap(n = 06) 123 30 49 10 10 20 
input additional data (0 => end, Negative => DeleteMax) :(add 12) - 
heap(n = 07) 123 30 49 10 10 20 12 
input additional data (0 => end, Negative => DeleteMax) :(add 43) - heap[8]=43  <-> heap[4]=10 heap[4]=10  <-> heap[2]=30 
heap(n = 08) 123 43 49 30 10 20 12 10 
input additional data (0 => end, Negative => DeleteMax) :(add 50) - heap[9]=50  <-> heap[4]=30 heap[4]=30  <-> heap[2]=43 
heap(n = 09) 123 50 49 43 10 20 12 10 30 
input additional data (0 => end, Negative => DeleteMax) :(add 1320) - heap[10]=1320  <-> heap[5]=10 heap[5]=10  <-> heap[2]=50 heap[2]=50  <-> heap[1]=123 
heap(n = 10) 1320 123 49 43 50 20 12 10 30 10 
input additional data (0 => end, Negative => DeleteMax) :Delete 1320 - heap[1]=10 <-> heap[2]=123 heap[2]=10 <-> heap[5]=50 input additional data (0 => end, Negative => DeleteMax) :Delete 123 - heap[1]=30 <-> heap[2]=50 heap[2]=30 <-> heap[4]=43 input additional data (0 => end, Negative => DeleteMax) :Delete 50 - heap[1]=10 <-> heap[3]=49 heap[3]=10 <-> heap[6]=20 input additional data (0 => end, Negative => DeleteMax) :(add 12) - 
heap(n = 08) 49 43 20 30 10 10 12 12 
input additional data (0 => end, Negative => DeleteMax) :Delete 49 - heap[1]=12 <-> heap[2]=43 heap[2]=12 <-> heap[4]=30 input additional data (0 => end, Negative => DeleteMax) :Delete 43 - heap[1]=12 <-> heap[2]=30 input additional data (0 => end, Negative => DeleteMax) :


```


# kadai10-5


## ソースコード


```c

#include <stdio.h>
#include <malloc.h>
#include "PLIB.h"

void push_list(int x,struct LIST **head){
  struct LIST *nr;
  nr = (struct LIST *)(malloc(sizeof(struct LIST)));
  if(nr == NULL){
    printf("** メモリ確保失敗 **\n");
    return;
  }
  if(*head == NULL) {
    nr->data = x;
    nr->next = NULL;
    *head = nr;
  } else {
    nr->data = x;
    nr->next=*head;
    *head = nr;
  }
  printf("p=%p,push x=%d\n",nr,x);
}

int pop_list(struct LIST **head){
  struct LIST *p;
  int t;
  if(*head == NULL){
    printf("POP-error: Underflow\n");
    return -1;
  }
  p = *head;
  t = p->data;
  *head = p->next;
  free(p);
  printf("p=%p, freed: ",p);
  return t;
}

int main(void){
  struct LIST *head = NULL;
  printf("/** 第三章 - 演習問題 問2(スタック)**\n");
  printf("sizeof(LIST)=%d\n",sizeof(LIST));
  push_list(100,&head);
  push_list(200,&head);
  push_list(300,&head);
  printlist(head);
  printf("pop_list(&head)=%d\n",pop_list(&head));
  printf("pop_list(&head)=%d\n",pop_list(&head));
  printlist(head);
  push_list(500,&head);
  printf("pop_list(&head)=%d\n",pop_list(&head));
  printf("pop_list(&head)=%d\n",pop_list(&head));
  printlist(head);
  printf("pop_list(&head)=%d\n",pop_list(&head));
  printf("*/\n");
}

```

## 出力


```

/** 第三章 - 演習問題 問2(スタック)**
sizeof(LIST)=16
p=0000000000022430,push x=100
p=0000000000022450,push x=200
p=0000000000022470,push x=300
print out from the head(head = 0000000000022470)
p=0000000000022470(p->data=300,p->next=0000000000022450)
p=0000000000022450(p->data=200,p->next=0000000000022430)
p=0000000000022430(p->data=100,p->next=0000000000000000)
p=0000000000022470, freed: pop_list(&head)=300
p=0000000000022450, freed: pop_list(&head)=200
print out from the head(head = 0000000000022430)
p=0000000000022430(p->data=100,p->next=0000000000000000)
p=0000000000022450,push x=500
p=0000000000022450, freed: pop_list(&head)=500
p=0000000000022430, freed: pop_list(&head)=100
printlist : list end(head = 0000000000000000)
print out from the head(head = 0000000000000000)
POP-error: Underflow
pop_list(&head)=-1
*/



```



# hatten10-1


## ソースコード


```c

#include <stdio.h>
#define N 6
#define NN 36

static int A[N][N] = {
  1,1,1,1,0,1,
  0,1,1,0,1,0,
  1,0,1,1,1,1,
  0,0,1,1,1,0,
  0,0,0,1,0,0,
  1,0,1,1,1,1,
};
static int L[N][N];
static int stack[NN][2];
static int ss = 0;

int push(int i,int j){
  stack[ss][0] = i;
  stack[ss][1] = j;
  ss++;
  return ss;
}

int pop(){
  if(ss == 0) {
    return -1;
  } else {
    ss--;
    return ss;
  }
}

int envsearch(int i,int j){
  if((i-1 >= 0) && (A[i-1][j]==1) && (L[i-1][j] ==0)){
    push(i-1,j);
  }
  if((i+1 < N) && (A[i+1][j]==1) && (L[i+1][j] ==0)){
    push(i+1,j);
  }
  if((j-1 >= 0) && (A[i][j-1]==1) && (L[i][j-1] ==0)){
    push(i,j-1);
  }
  if((j+1 < N) && (A[i][j+1]==1) && (L[i][j+1] ==0)){
    push(i,j+1);
  }
}

int main(void){
  int i,j,s,seqno;
  printf("/*** 第三章 - 演習問題問5 ** \n");
  for(i=0;i<N;i++){
    for(j=0;j<N;j++){
      L[i][j] = 0;
    }
  }
  seqno = 0;
  for(i=0;i<N;i++){
    for(j=0;j<N;j++){
      if((A[i][j]==1) && (L[i][j]==0)){
        seqno = seqno + 1;
        L[i][j] = seqno;
        printf("find new conn A(%d,%d),seqno =%d\n",i,j,seqno);
        envsearch(i,j);
        while(ss>0){
          s = pop();
          if((A[stack[s][0]][stack[s][1]]==1) && (L[stack[s][0]][stack[s][1]]==0)){
            L[stack[s][0]][stack[s][1]] = seqno;
            envsearch(stack[s][0],stack[s][1]);
          }
        }
      }
    }
  }

  for(i=0;i<N;i++){
    printf("\n");
    for(j=0;j<N;j++){
      printf("(%d,%d) = %d ",i,j,L[i][j]);
    }
  }
}

```

## 出力


```

/*** 第三章 - 演習問題問5 ** 
find new conn A(0,0),seqno =1
find new conn A(0,5),seqno =2
find new conn A(2,0),seqno =3
find new conn A(5,0),seqno =4

(0,0) = 1 (0,1) = 1 (0,2) = 1 (0,3) = 1 (0,4) = 0 (0,5) = 2 
(1,0) = 0 (1,1) = 1 (1,2) = 1 (1,3) = 0 (1,4) = 1 (1,5) = 0 
(2,0) = 3 (2,1) = 0 (2,2) = 1 (2,3) = 1 (2,4) = 1 (2,5) = 1 
(3,0) = 0 (3,1) = 0 (3,2) = 1 (3,3) = 1 (3,4) = 1 (3,5) = 0 
(4,0) = 0 (4,1) = 0 (4,2) = 0 (4,3) = 1 (4,4) = 0 (4,5) = 0 
(5,0) = 4 (5,1) = 0 (5,2) = 1 (5,3) = 1 (5,4) = 1 (5,5) = 1 


```


# kadai5-1

## ソースコード

```c
#include <stdio.h>
#define N 24
int sp[N] = {
  1670,1750,1280,1080,1700,1850,2030,1870,1920,1750,1400,1560,1070,770,1150,1070,1400,1120,1050,1500,1400,1740,2050,1780};
  
int main(void){
  int i,j,mxp,d;
  mxp = sp[1] - sp[0];
  printf("/*** アルゴリズム 1.1 **\n");
  for(i=0;i<=N-2;i++){
    for(j=i+1;j<=N-1;j++){
      d = sp[j] - sp[i];
      if(d > mxp) mxp = d;
    }
  }
  printf("mxp = %d\n*/\n",mxp);
}


```

## 出力

```
/*** アルゴリズム 1.1 **
  mxp = 1280
 */


```


# kadai5-2

## ソースコード

```c
#include <stdio.h>
#define N 24
int sp[N] = {
  1670,1750,1280,1080,1700,1850,2030,1870,1920,1750,1400,1560,1070,770,1150,1070,1400,1120,1050,1500,1400,1740,2050,1780};
  
int main(void){
  int i,j,mxp,msf,d;
  printf("/*** アルゴリズム 1.4 **\n");
  mxp = sp[1] - sp[0];
  msf = sp[0];
  for(j=1;j<=N-1;j++){
    d = sp[j] - msf;
    if(d > mxp) mxp = d;
    if(sp[j] < msf) msf = sp[j];
  }
  printf("mxp = %d\n*/\n",mxp);
}


```

## 出力

```
/*** アルゴリズム 1.4 **
  mxp = 1280
 */


```


# kadai5-3

## ソースコード

```c
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define N 100
int sp[N],printflag;
void data_set(){
  long int longi,d1,d2;
    sp[0] = 2000;
    for(longi=1;longi<N;longi++){
      d1=rand()%2;
      d2=rand()%10;
      if(sp[longi-1] > 5000) d1 = 1;
      else if(sp[longi-1] < 500) d1 = 0;
      if(d1==0) sp[longi] = sp[longi - 1] + sp[longi - 1] * d2 / 100;
      else sp[longi] = sp[longi - 1] - sp[longi - 1] * d2 / 100;
    }
}

int modify_value(long int longi){
  int dd,d1,d2,xi;
  if(longi<N) return sp[longi];
  dd = longi/N;
  d1 = dd%2;
  d2 = (dd+(longi%10))%10;
  if(d1==0) xi = sp[longi%N] + sp[longi%N] * d2 / 100;
  else xi = sp[longi%N] - sp[longi%N] * d2 / 100;
  return xi;
}

int main(void){
  int i,j,mxp,mxsp,d,dd,d1,d2,xi,xj,msf,NN,pat;
    clock_t start,end;
    long int longi,longj;
    srand(time(NULL));
    data_set();
    while(1){
      printf("0(n):1 0(n*N):2 ? ");
      scanf("%d",&pat);
      printf("NN=");
      scanf("%d",&NN);
      if(pat==1){
        start = clock();
        printf("/*** アルゴリズム O(n) **\n");
        mxp = sp[1] - sp[0];
        msf = sp[0];
        for(longi=1;longi <= NN - 1;longi++){
          xi = modify_value(longi);
          d = xi - msf;
          if(d > mxp) mxp = d;
            if(msf > xi) msf = xi;
        }
        end = clock();
        printf("mxp = %d \n*/\n",mxp);
        printf("order=O(n) NN = %d time = %2f秒\n",NN,(double)(end - start)/CLOCKS_PER_SEC);
      } else if(pat == 2){
        start = clock();
        printf("/*** アルゴリズム O(nn) **\n");
        mxp = sp[1] - sp[0];
        for(longi=1;longi<=NN-2;longi++){
          xi = modify_value(longi);
          for(longj=longi+1;longj<=NN-1;longj++){
            xj = modify_value(longj);
            d = xi - xj;
            if(d > mxp) mxp = d;
          }
        }
        end = clock();
        printf("mxp = %d \n*/\n",mxp);
        printf("order=O(n*n) NN = %d time = %2f秒\n",NN,(double)(end - start)/CLOCKS_PER_SEC);            
      } else exit;
    } 
}
```

## 出力

```
0(n):1 0(n*N):2 ? 1
NN=10000000
/*** アルゴリズム O(n) **
  mxp = 1419
 */
order=O(n) NN = 10000000 time = 0.132000秒
0(n):1 0(n*N):2 ? 1
NN=20000000
/*** アルゴリズム O(n) **
  mxp = 1419
 */
order=O(n) NN = 20000000 time = 0.255000秒
0(n):1 0(n*N):2 ? 1
NN=40000000
/*** アルゴリズム O(n) **
  mxp = 1419
 */
order=O(n) NN = 40000000 time = 0.501000秒
0(n):1 0(n*N):2 ? 1
NN=80000000
/*** アルゴリズム O(n) **
  mxp = 1419
 */
order=O(n) NN = 80000000 time = 1.003000秒
0(n):1 0(n*N):2 ? 1
NN=160000000
/*** アルゴリズム O(n) **
  mxp = 1419
 */
order=O(n) NN = 160000000 time = 2.003000秒
0(n):1 0(n*N):2 ? 2
NN=1000
/*** アルゴリズム O(nn) **
  mxp = 1385
 */
order=O(n*n) NN = 1000 time = 0.008000秒
0(n):1 0(n*N):2 ? 2
NN=2000
/*** アルゴリズム O(nn) **
  mxp = 1419
 */
order=O(n*n) NN = 2000 time = 0.025000秒
0(n):1 0(n*N):2 ? 2
NN=4000
/*** アルゴリズム O(nn) **
  mxp = 1419
 */
order=O(n*n) NN = 4000 time = 0.098000秒
0(n):1 0(n*N):2 ? 2
NN=8000
/*** アルゴリズム O(nn) **
  mxp = 1419
 */
order=O(n*n) NN = 8000 time = 0.392000秒
0(n):1 0(n*N):2 ? 2
NN=16000
/*** アルゴリズム O(nn) **
  mxp = 1419
 */
order=O(n*n) NN = 16000 time = 1.569000秒
0(n):1 0(n*N):2 ? NN=^C
```


# kadai5-4

## ソースコード

```c
#include <stdio.h>
#define N 4

void max_section_slove(int *arr,int length){
  int i,j,sum=0,max,maxi,maxj;
  max = arr[0];
  maxi = 0;
  maxj = 0;
  for(i=0;i<length;i++){
    sum = 0;
    for(j=i;j<length;j++){
      sum += arr[j];
      if(sum > max){
        max = sum;
        maxi = i;
        maxj = j;
      }
    }
  }
  printf("区間 a[%d]~a[%d]の和が最大: 最大値=%d\n",maxi,maxj,max);
  return;
}

// TEST
int main(void){
  int a[N] = {-1,-10,-3,-5};
  int b[N] = {2,-3,3,-2};
  max_section_slove(a,N);
  max_section_slove(b,N);
  return 0;
}

```

## 出力

```
区間 a[0]~a[0]の和が最大: 最大値=-1
区間 a[2]~a[2]の和が最大: 最大値=3
```


# kadai5-5

## ソースコード

```c
#include <stdio.h>
#define N 4

void max_section_slove(int *arr,int length){
  int i,d,max,maxi=0,maxj=0;
  d = arr[0];
  max = arr[0];
  for(i=1;i<length;i++){
    if(d + arr[i] > arr[i]){
      d = d + arr[i];
      if(max < d){
        max = d;
        maxj = i;
      }
    } else {
      d = arr[i];
      if(max < d){
        max = d;
        maxi = i;
        maxj = i;
      }
    }
  }
  printf("区間 a[%d]~a[%d]の和が最大: 最大値=%d\n",maxi,maxj,max);
  return;
}

// TEST
int main(void){
  int a[N] = {-1,-10,-3,-5};
  int b[N] = {2,-3,3,-2};
  max_section_slove(a,N);
  max_section_slove(b,N);
  return 0;
}

```

## 出力

```
区間 a[0]~a[0]の和が最大: 最大値=-1
区間 a[2]~a[2]の和が最大: 最大値=3
```

# hatten1-4

## ソースコード

```c
#include <stdio.h>
#define N 3
#define M 6
static int a[N] = {4,6,9};
static int b[M] = {2,5,8,12,16,18};

int c[N+M];
int main(void){
  int i,numa,numb;
  numa = 0;
  numb = 0;
  for(i=0;i<N+M;i++){
    if(numa >= N) {
      c[i] = b[numb];
      numb++;
    } else if(numb >= M){
      c[i] = a[numa];
      numa++;
    } else {
      if(a[numa] < b[numb]){
        c[i] = a[numa];
        numa++;
      } else {
        c[i] = b[numb];
        numb++;
      }
    }
  }
  printf("c = {");
  for(i=0;i<N+M;i++){
    printf("%d ",c[i]);
  }
  printf(" }\n");
}

```

## 出力

```
c = {2 4 5 6 8 9 12 16 18  }
```
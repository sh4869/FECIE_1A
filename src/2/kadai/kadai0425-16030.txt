# 2-1

## プログラム

```
#include <stdio.h>

int main(void){
  int i,j,w,data[4] = {4,-4,256,66560};
  char ch1,ch2,ch3;
  printf("/*** P2 1 ***\n");
  for(j=0;j<4;j++){
    w = data[j];
    for(i=0;i<32;i++){
      if(w<0)printf("1");
      else printf("0");
      w = w << 1;
    }
    printf("\n");
  }

  printf("\n\n***10進数(16進数)とASCII文字との対応***\n");
  for(i=32;i<127;i++){
    if(i==(i/8)*8){
      printf("\n");
      printf("%3d(%02x)%c",i,i,i);
    }
  }
  ch1 = 'A';
  ch2 = ch1 + 5;
  ch3 = 'a' - 'z';
  printf("\n\n ch1=%c,ch1=%d,ch2=%c,ch3=%d",ch1,ch1,ch2,ch3);
  printf("\n*/\n");
}
```

## 出力

```
/*** P2 1 ***
00000000000000000000000000000100
11111111111111111111111111111100
00000000000000000000000100000000
00000000000000010000010000000000


***10進数(16進数)とASCII文字との対応***

 32(20)
 40(28)(
 48(30)0
 56(38)8
 64(40)@
 72(48)H
 80(50)P
 88(58)X
 96(60)`
104(68)h
112(70)p
120(78)x

 ch1=A,ch1=65,ch2=F,ch3=-25
*/
```

## 解説

ch1 = Aなので，int型に変換すると65になる．65に5を足すと70になるので，ch2はASCIIで70であるFが表示される．'a' = 97,z = 122なのでそのさは-25となる．

# 2-2

## プログラム

```
#include <stdio.h>

void print_bitposition(int w){
  int i = 0;
  for(i=0;i<32;i++){
    if(w<0){
      printf("1");
    } else {
      printf("0");
    }
    w = w << 1;
  }
  printf("\n");
}

int main(void){
  int wd,b=0x00ff0f0f,d=0x0ff03c3c;
  int p1,p2,p3,p,q = 0x0ff03c3c;
  printf("/*** P2 2(ビット演算) *** \n");
  printf("b = 0x00ff0f0f --> ");
  print_bitposition(b);
  printf("d = 0x0ff03c3c --> ");
  print_bitposition(d);
  
  wd = b | d;
  printf("b OR d ----------> ");
  print_bitposition(wd);

  wd = b & d;
  printf("b AND d ---------> ");
  print_bitposition(wd);

  wd = b ^ d;
  printf("b (+) d ---------> ");
  print_bitposition(wd);

  wd = ~b;
  printf("~b --------------> ");
  print_bitposition(wd);

  p1 |= q;
  printf("p1 ---> ");
  print_bitposition(p1);

  p2 &= q;
  printf("p2 ---> ");
  print_bitposition(p2);

  p3 ^= q;
  printf("p3 ---> ");
  print_bitposition(p3);

  p = b == d;
  printf("(b==d) = %d\n",p);
  
  p = b < d;
  printf("(b < d) = %d\b",p);

  printf("*/\n");
}
```

## 出力

```
/*** P2 2(ビット演算) ***                                       
b = 0x00ff0f0f --> 00000000111111110000111100001111        
d = 0x0ff03c3c --> 00001111111100000011110000111100        
b OR d ----------> 00001111111111110011111100111111        
b AND d ---------> 00000000111100000000110000001100        
b (+) d ---------> 00001111000011110011001100110011        
~b --------------> 11111111000000001111000011110000        
p1 ---> 00001111111100000011110000111100                   
p2 ---> 00000000000000000000000000001000                   
p3 ---> 00001111111100000011110000111100                   
(b==d) = 0                                                 
(b < d) = 1                                                
*/                                                         
                                                           
```

## 解説

ビット演算の結果の通りになるとしか言いようがない．

# 2-1 Advance

## プログラム

```
#include <stdio.h>

void print_bitposition(int w){
  int i = 0;
  for(i=0;i<32;i++){
    if(w<0){
      printf("1");
    } else {
      printf("0");
    }
    w = w << 1;
  }
  printf("\n");
}

int main(void){
  int i;
  while(1){
    printf("10進数を入力してください:");
    scanf("%d",&i);
    print_bitposition(i);
    printf("終了しますか? はい:0,いいえ:1\n");
    scanf("%d",&i);
    if(!i){
     break;
    }
  }
}
```

## 出力

```
10進数を入力してください:12
00000000000000000000000000001100
終了しますか? はい:0,いいえ:1
1
10進数を入力してください:13
00000000000000000000000000001101
終了しますか? はい:0,いいえ:1
0
```

# 2-3

## プログラム

```
#include <stdio.h>

void print_hexa(int);
void print_c(unsigned char);
void print_bitposition(int);

int main(void){
  int a;
  unsigned int b;
  unsigned char c;
  char ch;
  printf("/** P2-3 (シフト演算) **");
  printf("\n int a; (算術シフト:右シフトは sign bitが続く\n");
  
  a = 0x0fffffff;
  print_hexa(a);
  a = a >> 12;
  print_hexa(a);
  a = a << 16;
  print_hexa(a);
  a = a >> 16;
  print_hexa(a);
  a = a << 20;
  print_hexa(a);
  a = a >> 12;
  print_hexa(a);

  printf("unsigned int b;(論理シフト:右シフトは0が続く)\n");

  b = 0x0fffffff;
  print_hexa(b);
  b = b >> 12;
  print_hexa(b);
  b = b << 16;
  print_hexa(b);
  b = b >> 16;
  print_hexa(b);
  b = b << 20;
  print_hexa(b);
  b = b >> 12;
  print_hexa(b);
  
  printf("\n c:符号なし文字\n");
  print_c(c);
  c = c >> 2;
  print_c(c);
  ch = 97;
  printf("\nch = %d (hexa %x) ch = %c ch +7 =%c\n",ch,ch,ch,ch+7);
  printf("\n");
}
void print_hexa(int t){
  printf("(hex %08X) %10d;",t,t);
  print_bitposition(t);
}

void print_c(unsigned char t){
  printf("(hex %02x) %03d;",t,t);
}

void print_bitposition(int w){
  int i = 0;
  for(i=0;i<32;i++){
    if(w<0){
      printf("1");
    } else {
      printf("0");
    }
    w = w << 1;
  }
  printf("\n");
}
```

## 出力


```
/** P2-3 (シフト演算) **
 int a; (算術シフト:右シフトは sign bitが続く
(hex 0FFFFFFF)  268435455;00001111111111111111111111111111
(hex 0000FFFF)      65535;00000000000000001111111111111111
(hex FFFF0000)     -65536;11111111111111110000000000000000
(hex FFFFFFFF)         -1;11111111111111111111111111111111
(hex FFF00000)   -1048576;11111111111100000000000000000000
(hex FFFFFF00)       -256;11111111111111111111111100000000
unsigned int b;(論理シフト:右シフトは0が続く)
(hex 0FFFFFFF)  268435455;00001111111111111111111111111111
(hex 0000FFFF)      65535;00000000000000001111111111111111
(hex FFFF0000)     -65536;11111111111111110000000000000000
(hex 0000FFFF)      65535;00000000000000001111111111111111
(hex FFF00000)   -1048576;11111111111100000000000000000000
(hex 000FFF00)    1048320;00000000000011111111111100000000

 c:符号なし文字
(hex 00) 000;(hex 00) 000;
ch = 97 (hexa 61) ch = a ch +7 =h

```

## 解説

こちらも基本的にbit演算の通りとなる．

# 2-4

## プログラム

```
#include <stdio.h>
#include "PLIB.h"

int main(void){
  int a,b,n;
  double y;
  printf("/*** P2-4(int) ***\n");

  a = 12345;
  printf("sizeof(a) = %d,&a = %p,(&a = aのアドレス) *(&a) = %d(アドレス&aの中身 = aの値)\n",sizeof(a),&a,*(&a));
  y = 12.34;
  printf("sizeof(y) = &d,&y = &p\n",sizeof(y),&y);
  printf("補足:アドレスはパソコン毎に異なります\n");

  a = 64;
  printf("a = %08x, a = ",a);
  print_bitposition(a);
  printf("a = %08x, a = ",a);
  print_bitposition(a);
  b = -a;
  printf("b = %08x, b = ",b);
  print_bitposition(b);

  // -64は64ビット表現を反転させてから+1
  a = 15*256*256 + 15*256 + 15;
  printf("a = %08x, a = ",a);
  print_bitposition(a);
  b = -a;
  printf("b = %08x, b = ",b);
  print_bitposition(b);

  n = 2745;
  printf("10進数 n = %06d,%d\n",n,n);
  printf("16進数: n= %06x,%06X,%x,%X",n,n,n,n);
  printf("*/\n");
  return 0;
}

/***
# 考察
KISSの法則からして，同じ処理が繰り返されるのであれば関数にまとめるべきだと考えられる．
たとえば変数にある値を代入してそれを16進数とbitとして表示する処理はプログラム中で繰り返されている．
その処理を引数にintの値一つを取る関数にまとめて呼び出すようにすると，プログラムも可読性があがる．
これは御存知の通りだと思う．

また，この講義は情報工学科の二年生を対象に行われている講義である．
そのため，受講者の多くはまだプログラミングに慣れていない．
よいプログラムとは何か，ということを問題を通して理解させることができるとよいのではないか．
 ***/
```

## 出力

```
/*** P2-4(int) ***
sizeof(a) = 4,&a = 000000000066FE44,(&a = aのアドレス) *(&a) = 12345(アドレス&aの中身 = aの値)
sizeof(y) = &d,&y = &p
補足:アドレスはパソコン毎に異なります
a = 00000040, a = 00000000000000000000000001000000
a = 00000040, a = 00000000000000000000000001000000
b = ffffffc0, b = 11111111111111111111111111000000
a = 000f0f0f, a = 00000000000011110000111100001111
b = fff0f0f1, b = 11111111111100001111000011110001
10進数 n = 002745,2745
16進数: n= 000ab9,000AB9,ab9,AB9*/
```

## 解説

省略

# q-1

## プログラム

```
#include <stdio.h>

#define QUEEN_ROW 1
#define QUEEN_COLUMN 2

int ar[6][6] = {{0}};

int check_queen(int row,int column){
  int i;
  for(i=0;i<6;i++){
    if(ar[row][i] == 1 || ar[i][column] == 1) return 0;
    if(column - (row - i) > -1 && column - (row - i) < 6){
      if(ar[i][column - (row - i)]==1) return 0;
    }
    if(column + (row - i) && column + (row - i) < 6){
      if(ar[i][column + (row - i)] == 1) return 0;
    }
  }
  return 1;
}

int main(void){
  int row,column;
  ar[QUEEN_ROW][QUEEN_COLUMN] = 1;
  while(1){
    printf("Queenのポジションを入力してください:");
    scanf("%d %d",&row,&column);
    if(check_queen(row-1,column-1)) printf("sucess\n");
    else printf("fail\n");
  }
  return 0;
}
```

## 出力

```
Queenのポジションを入力してください:1 6
sucess
Queenのポジションを入力してください:1 1
sucess
Queenのポジションを入力してください:3 1
sucess
Queenのポジションを入力してください:5 2
sucess
Queenのポジションを入力してください:4 6
sucess
Queenのポジションを入力してください:2 1
fail
Queenのポジションを入力してください:1 2
fail
Queenのポジションを入力してください:1 3
fail
Queenのポジションを入力してください:1 4
fail
Queenのポジションを入力してください:2 5
fail
Queenのポジションを入力してください:4 1
fail
Queenのポジションを入力してください:5 3
fail
Queenのポジションを入力してください:5 6
fail
```

## 解説

特に記述すべきところはない．何も考えずに，ひたすらループで回してくだけである．ななめの処理に関しては多少工夫すればよい

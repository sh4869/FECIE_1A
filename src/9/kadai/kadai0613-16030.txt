
# hatten9-1


## ソースコード


```c

#include <stdio.h>
#define QSIZE 4
int queue[QSIZE];
int Qhead;
int Qtail;
void Enqueue(int x){
  Qtail = (Qtail+1) % QSIZE;
  if(Qhead==Qtail){
    printf("Error: Overflow\n");
    return;
  }
  printf("Enqueue %d (head=%d,tail=%d)\n",x,Qhead,Qtail);
  queue[Qtail] = x;
}

int Dequeue(){
  if(Qhead==Qtail){
    printf("Error: Underflow\n");
    return -1;
  }
  Qhead = (Qhead + 1) % QSIZE;
  printf(" (head=%d,tail=%d) ",Qhead,Qtail);
  return queue[Qhead];
}

int main(void){
  int data;
  printf("/*** プログラム3.11-12 **\n");
  Qhead = Qtail = 0;
  Enqueue(10);
  Enqueue(20);
  Enqueue(30);
  data = Dequeue();
  printf("Dequeue1: %d\n",data);
  Enqueue(40);
  data = Dequeue();
  printf("Dequeue2: %d\n",data);
  Enqueue(50);
  Enqueue(60);
  printf("*/\n");
}

```

## 出力


```

/*** プログラム3.11-12 **
Enqueue 10 (head=0,tail=1)
Enqueue 20 (head=0,tail=2)
Enqueue 30 (head=0,tail=3)
 (head=1,tail=3) Dequeue1: 10
Enqueue 40 (head=1,tail=0)
 (head=2,tail=0) Dequeue2: 20
Enqueue 50 (head=2,tail=1)
Error: Overflow
*/



```


# hatten9-2


## ソースコード


```c

#include <stdio.h>
#include <stdlib.h>

#define MAX_GAKUSEI 3
#define MAX_KAMOKU 3

struct SEISEKI {
  struct SEISEKI *glink;
  struct SEISEKI *klink;
  struct GAKUSEI *gakusei;
  struct KAMOKU *kamoku;
  int seiseki;
};

struct GAKUSEI {
  struct SEISEKI *glink;
  char *name;
} gakusei[MAX_GAKUSEI];

struct KAMOKU {
  struct SEISEKI *klink;
  char *name;
} kamoku[MAX_KAMOKU];

void initialize(){
  int i;
  for(i=0;i<MAX_GAKUSEI;i++){
    gakusei[i].glink = NULL;
  }
  for(i=0;i<MAX_KAMOKU;i++){
    kamoku[i].klink = NULL;
  }
}

void add_seiseki(int x,int y,int a){
  struct SEISEKI *p;
  if((p = malloc(sizeof(struct SEISEKI)))==NULL){
    printf("no memory");
    exit(-1);
  }
  p->glink = gakusei[x].glink;
  gakusei[x].glink = p;
  p->klink = kamoku[y].klink;
  kamoku[y].klink = p;
  p->gakusei = &(gakusei[x]);
  p->kamoku = &kamoku[y];
  p->seiseki = a;
}

short get_seiseki(int x,int y){
  struct SEISEKI *p;
  for(p=gakusei[x].glink;p!=NULL;p=p->glink){
    if(p->kamoku == &kamoku[y]){
      return p->seiseki;
    }
  }
  return -1;
}

void print_gakusei(int x){
  struct SEISEKI *p;
  for(p=kamoku[x].klink;p!=NULL;p=p->klink){
    printf("%s %d\n",p->gakusei->name,p->seiseki);
  }
}

int main(void){
  int i;
  printf("/*\n");
  initialize();
  char name[3][20] = {"Tanaka","Saitou","Yamazaki"};
  char kamokuname[3][20] = {"English","Mathematics","Programming"};
  gakusei[0].name = name[0];
  gakusei[1].name = name[1];
  gakusei[2].name = name[2];

  kamoku[0].name = kamokuname[0];
  kamoku[1].name = kamokuname[1];
  kamoku[2].name = kamokuname[2];

  add_seiseki(0,0,67);
  add_seiseki(0,1,80);
  add_seiseki(1,0,59);
  add_seiseki(1,2,98);
  add_seiseki(2,0,77);
  add_seiseki(2,1,88);
  add_seiseki(2,2,90);
  for(i=0;i<MAX_KAMOKU;i++){
    printf("kamoku=%s\n",kamoku[i].name);
    print_gakusei(i);
  }
  printf("*/\n");
}


```

## 出力


```

/*
kamoku=English
Yamazaki 77
Saitou 59
Tanaka 67
kamoku=Mathematics
Yamazaki 88
Tanaka 80
kamoku=Programming
Yamazaki 90
Saitou 98
*/



```


# kadai9-1


## ソースコード


```c

#include <stdio.h>
#define STACKSIZE 10000
int stack[STACKSIZE];
int S_top = 0;
void push(int x){
  if(S_top == STACKSIZE){
    printf("Error Overflow\n");
    return;
  } else {
    stack[S_top++] = x;
  }
}

int pop(void){
  if(S_top == 0){
    printf("Error Underflow\n");
    return -1;
  }
  return stack[--S_top];
}

void printstack(int *stack){
  int i = 0;
  while(i<S_top){
    printf("stack[%d]=%d",i,stack[i]);
    i++;
  }
  printf("\n");
}

int main(void){
  int data,i;
  printf("/*** プログラム3.8 **\n");
  push(13);
  push(25);
  push(41);
  printstack(stack);
  for(i=0;i<4;i++){
    data = pop();
    if(data>0){
      printf("stack[%d]=%d\n",S_top,data);
 }
 }
  printf("*/\n");
}

```

## 出力


```

/*** プログラム3.8 **
stack[0]=13stack[1]=25stack[2]=41
stack[2]=41
stack[1]=25
stack[0]=13
Error Underflow
*/



```


# kadai9-2


## ソースコード


```c

#include <stdio.h>
#define Qsize 10
int Qhead = 0,Qtail = 0;
int queue[Qsize];
void Enqueue(int x){
  queue[++Qtail] = x;
  printf("(Enqueue) %d ",x);
}

int Dequeue(){
  printf("(Dequeue) %d ",queue[Qhead+1]);
  return queue[++Qhead];
}

int main(void){
  printf("/*** Program 3.9-3.10 **\n");
  Enqueue(10);
  printf("Qhead=%d,Qtail=%d\n",Qhead,Qtail);
  Enqueue(20);
  printf("Qhead=%d,Qtail=%d\n",Qhead,Qtail);
  Enqueue(30);
  printf("Qhead=%d,Qtail=%d\n",Qhead,Qtail);

  Dequeue();
  printf("Qhead=%d,Qtail=%d\n",Qhead,Qtail);
  Dequeue();
  printf("Qhead=%d,Qtail=%d\n",Qhead,Qtail);

  Enqueue(40);
  printf("Qhead=%d,Qtail=%d\n",Qhead,Qtail);

  Dequeue();
  printf("Qhead=%d,Qtail=%d\n",Qhead,Qtail);

  printf("*/\n");
}



```

## 出力


```

/*** Program 3.9-3.10 **
(Enqueue) 10 Qhead=0,Qtail=1
(Enqueue) 20 Qhead=0,Qtail=2
(Enqueue) 30 Qhead=0,Qtail=3
(Dequeue) 10 Qhead=1,Qtail=3
(Dequeue) 20 Qhead=2,Qtail=3
(Enqueue) 40 Qhead=2,Qtail=4
(Dequeue) 30 Qhead=3,Qtail=4
*/



```


# kadai9-3


## ソースコード


```c

#include <stdio.h>
#define QSIZE 4
int queue[QSIZE];
int Qhead;
int Qtail;
void Enqueue(int x){
  Qtail = (Qtail+1) % QSIZE;
  printf("Enqueue %d (head=%d,tail=%d)\n",x,Qhead,Qtail);
  queue[Qtail] = x;
  if(Qhead==Qtail){
    printf("Error: Overflow\n");
    return;
  }
}

int Dequeue(){
  if(Qhead==Qtail){
    printf("Error: Underflow\n");
    return -1;
  }
  Qhead = (Qhead + 1) % QSIZE;
  printf(" (head=%d,tail=%d) ",Qhead,Qtail);
  return queue[Qhead];
}

int main(void){
  int data;
  printf("/*** プログラム3.11-12 **\n");
  Qhead = Qtail = 0;
  Enqueue(10);
  Enqueue(20);
  Enqueue(30);
  data = Dequeue();
  printf("Dequeue1: %d\n",data);
  Enqueue(40);
  data = Dequeue();
  printf("Dequeue2: %d\n",data);
  Enqueue(50);
  Enqueue(60);
  printf("*/\n");
}

```

## 出力


```

/*** プログラム3.11-12 **
Enqueue 10 (head=0,tail=1)
Enqueue 20 (head=0,tail=2)
Enqueue 30 (head=0,tail=3)
 (head=1,tail=3) Dequeue1: 10
Enqueue 40 (head=1,tail=0)
 (head=2,tail=0) Dequeue2: 20
Enqueue 50 (head=2,tail=1)
Enqueue 60 (head=2,tail=2)
Error: Overflow
*/



```


# kadai9-4


## ソースコード


```c

#include <stdio.h>
#include <malloc.h>
typedef struct LIST {
  int data;
  struct LIST *next;
} LIST;

void Enqueue_list(int x,LIST**,LIST**);
int Dequeue_list(LIST**,LIST**);
LIST *head,*tail;
void printlist(LIST *);

int main(void){
  printf("/** 第三章-演習問題 問4(キュー) **\n");
  head = tail = NULL;
  Enqueue_list(100,&head,&tail);
  Enqueue_list(200,&head,&tail);
  Enqueue_list(300,&head,&tail);
  printlist(head);
  printf("Dequeue_list()=%d\n",Dequeue_list(&head,&tail));
  printf("Dequeue_list()=%d\n",Dequeue_list(&head,&tail));
  printlist(head);
  Enqueue_list(5000,&head,&tail);
  printf("Dequeue_list()=%d\n",Dequeue_list(&head,&tail));
  printf("Dequeue_list()=%d\n",Dequeue_list(&head,&tail));
  printlist(head);
  printf("Dequeue_list()=%d\n",Dequeue_list(&head,&tail));
  printf("*/\n");
}

void printlist(LIST *head){
  LIST *p;
  p = head;
  if(p==NULL){
    printf("printlist: list end (head = %p)\n",p);
  }
  printf("print out from the head (head = %p)\n",head);
  while(p!=NULL){
    printf("p=%p,(p->data=%d,p->next=%p)\n",p,p->data,p->next);
    if(p->next != NULL) {
      p = p->next;
    } else {
      break;
    }
  }
}

void Enqueue_list(int x,LIST **head,LIST **tail){
  LIST *nr;
  nr = (LIST *)(malloc(sizeof(LIST)));
  if(nr == NULL) {
    printf("** ERROR: No Memory **\n");
    return;
  }
  if(*tail == NULL){
    nr->data = x;
    nr->next = NULL;
    *tail = nr;
    *head = nr;
  } else {
    (*tail)->next = nr;
    nr->data = x;
    nr->next = NULL;
    *tail = nr;
  }
  printf("p=%p Enqueue x = %d\n",nr,x);
}

int Dequeue_list(LIST **head,LIST **tail){
  LIST *p1;
  int t;
  if(*tail == NULL){
    printf("Dequeue-error: Underflow\n");
    return -1;
  } else if(*head==*tail){
    p1 = *head;
    t = p1->data;
    *head = NULL;
    *tail = NULL;
    printf("p1=%p freed: ",p1);
    free(p1);
    return t;
  } else {
    p1 = *head;
    t = (*head)->data;
    (*head) = (*head)->next;
    printf("p1=%p freed: ",p1);
    free(p1);
    return t;
  }
}

```

## 出力


```

/** 第三章-演習問題 問4(キュー) **
p=0000000000A323D0 Enqueue x = 100
p=0000000000A323F0 Enqueue x = 200
p=0000000000A32410 Enqueue x = 300
print out from the head (head = 0000000000A323D0)
p=0000000000A323D0,(p->data=100,p->next=0000000000A323F0)
p=0000000000A323F0,(p->data=200,p->next=0000000000A32410)
p=0000000000A32410,(p->data=300,p->next=0000000000000000)
p1=0000000000A323D0 freed: Dequeue_list()=100
p1=0000000000A323F0 freed: Dequeue_list()=200
print out from the head (head = 0000000000A32410)
p=0000000000A32410,(p->data=300,p->next=0000000000000000)
p=0000000000A323D0 Enqueue x = 5000
p1=0000000000A32410 freed: Dequeue_list()=300
p1=0000000000A323D0 freed: Dequeue_list()=5000
printlist: list end (head = 0000000000000000)
print out from the head (head = 0000000000000000)
Dequeue-error: Underflow
Dequeue_list()=-1
*/

```


# kadai9-5


## ソースコード


```c

#include <stdio.h>
#include "PLIB.h"


LIST *head,*tail;
void add_to_top(int);
int take_from_top();
void add_to_bottom(int);
int take_from_bottom();

int main(void){
  printf("/*** 第三章 演習問題 問1**\n");
  printf("(case-1) 先頭に追加(push),先頭から取り出し(pop)\n");
  head = tail = NULL;
  add_to_top(100);
  add_to_top(200);
  add_to_top(300);
  add_to_top(400);
  printlist(head);

  take_from_top();
  take_from_top();
  printlist(head);
  take_from_top();
  take_from_top();
  printlist(head);

  printf("\n(case-2) 先頭に追加 末尾から取り出し\n");
  head = tail = NULL;
  add_to_top(100);
  add_to_top(200);
  add_to_top(300);
  add_to_top(400);
  printlist(head);
  take_from_bottom();
  take_from_bottom();
  printlist(head);

  printf("\n(case-3) 末尾に追加(Enqueue), 先頭から取り出し(Dequeue)\n");
  head = tail = NULL;
  add_to_bottom(100);
  add_to_bottom(200);
  add_to_bottom(300);
  printlist(head);
  take_from_top();
  take_from_top();
  printlist(head);
  take_from_top();
  printlist(head);
  printf("*/\n");
}

void add_to_top(int x){
  LIST *p;
  p = (LIST *)(malloc(sizeof(LIST)));
  p->data = x;
  p->next = head;
  head = p;
}

int take_from_top(){
  LIST *p;
  int x;
  if(head == NULL){
    printf("Error: Underflow(take top)\n");
    return -1;
  }
  p= head;
  x = p->data;
  head = p->next;
  free(p);
  return x;
}

int take_from_bottom(){
  LIST *p,*p_up;
  int x;
  if(head==NULL){
    printf("Error: Underflow(take bottom)\n");
    return -1;
  }
  p = head;
  p_up = NULL;
  while(p->next != NULL){
    p_up = p;
    p = p->next;
  }
  p_up->next = NULL;
  x = p->data;
  printf("x=%d (head =%p) (freed %p)\n",x,head,p);
  free(p);
  return x;
}

void add_to_bottom(int x){
  LIST *p,*p2;
  p2 = (LIST *)(malloc(sizeof(LIST)));
  p2->data = x;
  p2->next = NULL;
  if(head == NULL) head = p2;
  else {
    p = head;
    while(p->next != NULL){
      p = p->next;
    }
    p->next = p2;
  }
}


```

## 出力


```

/*** 第三章 演習問題 問1**
(case-1) 先頭に追加(push),先頭から取り出し(pop)
print out from the head(head = 0000000000AE2490)
p=0000000000AE2490(p->data=400,p->next=0000000000AE2470)
p=0000000000AE2470(p->data=300,p->next=0000000000AE2450)
p=0000000000AE2450(p->data=200,p->next=0000000000AE2430)
p=0000000000AE2430(p->data=100,p->next=0000000000000000)
print out from the head(head = 0000000000AE2450)
p=0000000000AE2450(p->data=200,p->next=0000000000AE2430)
p=0000000000AE2430(p->data=100,p->next=0000000000000000)
printlist : list end(head = 0000000000000000)
print out from the head(head = 0000000000000000)

(case-2) 先頭に追加 末尾から取り出し
print out from the head(head = 0000000000AE2490)
p=0000000000AE2490(p->data=400,p->next=0000000000AE2470)
p=0000000000AE2470(p->data=300,p->next=0000000000AE2450)
p=0000000000AE2450(p->data=200,p->next=0000000000AE2430)
p=0000000000AE2430(p->data=100,p->next=0000000000000000)
x=100 (head =0000000000AE2490) (freed 0000000000AE2430)
x=200 (head =0000000000AE2490) (freed 0000000000AE2450)
print out from the head(head = 0000000000AE2490)
p=0000000000AE2490(p->data=400,p->next=0000000000AE2470)
p=0000000000AE2470(p->data=300,p->next=0000000000000000)

(case-3) 末尾に追加(Enqueue), 先頭から取り出し(Dequeue)
print out from the head(head = 0000000000AE2430)
p=0000000000AE2430(p->data=100,p->next=0000000000AE2450)
p=0000000000AE2450(p->data=200,p->next=0000000000AE24B0)
p=0000000000AE24B0(p->data=300,p->next=0000000000000000)
print out from the head(head = 0000000000AE24B0)
p=0000000000AE24B0(p->data=300,p->next=0000000000000000)
printlist : list end(head = 0000000000000000)
print out from the head(head = 0000000000000000)
*/



```

